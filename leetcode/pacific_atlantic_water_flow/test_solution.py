import pytest

from leetcode_py import logged_test

from .helpers import assert_pacific_atlantic, run_pacific_atlantic
from .solution import Solution


class TestPacificAtlanticWaterFlow:
    def setup_method(self):
        self.solution = Solution()

    @logged_test
    @pytest.mark.parametrize(
        "heights, expected",
        [
            (
                [
                    [1, 2, 2, 3, 5],
                    [3, 2, 3, 4, 4],
                    [2, 4, 5, 3, 1],
                    [6, 7, 1, 4, 5],
                    [5, 1, 1, 2, 4],
                ],
                [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]],
            ),
            ([[1]], [[0, 0]]),
            ([[2, 1], [1, 2]], [[0, 0], [0, 1], [1, 0], [1, 1]]),
            (
                [[1, 2, 3], [8, 9, 4], [7, 6, 5]],
                [[0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]],
            ),
            (
                [[3, 3, 3], [3, 1, 3], [0, 2, 4]],
                [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 1], [2, 2]],
            ),
            (
                [[1, 1], [1, 1], [1, 1]],
                [[0, 0], [0, 1], [1, 0], [1, 1], [2, 0], [2, 1]],
            ),
            (
                [[10, 10, 10], [10, 1, 10], [10, 10, 10]],
                [[0, 0], [0, 1], [0, 2], [1, 0], [1, 2], [2, 0], [2, 1], [2, 2]],
            ),
            (
                [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]],
                [
                    [0, 3],
                    [1, 0],
                    [1, 1],
                    [1, 2],
                    [1, 3],
                    [2, 0],
                    [2, 1],
                    [2, 2],
                    [2, 3],
                    [3, 0],
                    [3, 1],
                    [3, 2],
                    [3, 3],
                ],
            ),
            (
                [[5, 4, 3], [4, 3, 2], [3, 2, 1]],
                [[0, 0], [0, 1], [0, 2], [1, 0], [2, 0]],
            ),
            (
                [[1, 3, 2, 4], [6, 8, 7, 3], [5, 7, 6, 2], [4, 4, 5, 1]],
                [
                    [0, 3],
                    [1, 0],
                    [1, 1],
                    [1, 2],
                    [2, 0],
                    [2, 1],
                    [2, 2],
                    [3, 0],
                    [3, 1],
                    [3, 2],
                ],
            ),
            (
                [
                    [4, 2, 7, 3, 4],
                    [2, 1, 1, 3, 2],
                    [1, 1, 2, 2, 1],
                    [2, 1, 2, 2, 1],
                    [2, 1, 1, 1, 1],
                ],
                [
                    [0, 0],
                    [0, 1],
                    [0, 2],
                    [0, 3],
                    [0, 4],
                    [1, 0],
                    [1, 1],
                    [1, 2],
                    [1, 3],
                    [1, 4],
                    [2, 0],
                    [2, 1],
                    [2, 2],
                    [2, 3],
                    [2, 4],
                    [3, 0],
                    [3, 1],
                    [3, 2],
                    [3, 3],
                    [3, 4],
                    [4, 0],
                    [4, 1],
                    [4, 2],
                    [4, 3],
                    [4, 4],
                ],
            ),
            (
                [
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                ],
                [
                    [0, 0],
                    [0, 1],
                    [0, 2],
                    [0, 3],
                    [0, 4],
                    [0, 5],
                    [0, 6],
                    [0, 7],
                    [0, 8],
                    [0, 9],
                    [0, 10],
                    [0, 11],
                    [0, 12],
                    [0, 13],
                    [0, 14],
                    [0, 15],
                    [0, 16],
                    [0, 17],
                    [0, 18],
                    [0, 19],
                    [1, 0],
                    [1, 1],
                    [1, 2],
                    [1, 3],
                    [1, 4],
                    [1, 5],
                    [1, 6],
                    [1, 7],
                    [1, 8],
                    [1, 9],
                    [1, 10],
                    [1, 11],
                    [1, 12],
                    [1, 13],
                    [1, 14],
                    [1, 15],
                    [1, 16],
                    [1, 17],
                    [1, 18],
                    [1, 19],
                ],
            ),
        ],
    )
    def test_pacific_atlantic(self, heights: list[list[int]], expected: list[list[int]]):
        result = run_pacific_atlantic(Solution, heights)
        assert_pacific_atlantic(result, expected)
