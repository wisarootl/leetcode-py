import pytest

from leetcode_py import logged_test

from .helpers import assert_add_two_numbers, run_add_two_numbers
from .solution import Solution


class TestAddTwoNumbers:
    def setup_method(self):
        self.solution = Solution()

    @logged_test
    @pytest.mark.parametrize(
        "l1_vals, l2_vals, expected_vals",
        [
            ([2, 4, 3], [5, 6, 4], [7, 0, 8]),
            ([0], [0], [0]),
            ([9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9], [8, 9, 9, 9, 0, 0, 0, 1]),
            ([1], [2], [3]),
            ([5], [5], [0, 1]),
            ([1, 8], [0], [1, 8]),
            ([0], [1, 8], [1, 8]),
            ([9, 9], [1], [0, 0, 1]),
            ([1], [9, 9], [0, 0, 1]),
            ([2, 4, 3], [5, 6, 4], [7, 0, 8]),
            (
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
                [5, 6, 4],
                [
                    6,
                    6,
                    4,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
            ),
            (
                [5, 6, 4],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
                [
                    6,
                    6,
                    4,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
            ),
            ([9], [9], [8, 1]),
            ([9, 9], [9, 9], [8, 9, 1]),
            ([1, 2, 3], [4, 5, 6], [5, 7, 9]),
            ([7, 8, 9], [1, 2, 3], [8, 0, 3, 1]),
            ([1, 2, 3, 4, 5], [6, 7, 8], [7, 9, 1, 5, 5]),
        ],
    )
    def test_add_two_numbers(self, l1_vals: list[int], l2_vals: list[int], expected_vals: list[int]):
        result = run_add_two_numbers(Solution, l1_vals, l2_vals)
        assert_add_two_numbers(result, expected_vals)
