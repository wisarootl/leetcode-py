import pytest

from leetcode_py.test_utils import logged_test

from .helpers import assert_letter_combinations, run_letter_combinations
from .solution import Solution


class TestLetterCombinationsOfAPhoneNumber:
    def setup_method(self):
        self.solution = Solution()

    @logged_test
    @pytest.mark.parametrize(
        "digits, expected",
        [
            ("23", ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]),
            ("", []),
            ("2", ["a", "b", "c"]),
            (
                "234",
                [
                    "adg",
                    "adh",
                    "adi",
                    "aeg",
                    "aeh",
                    "aei",
                    "afg",
                    "afh",
                    "afi",
                    "bdg",
                    "bdh",
                    "bdi",
                    "beg",
                    "beh",
                    "bei",
                    "bfg",
                    "bfh",
                    "bfi",
                    "cdg",
                    "cdh",
                    "cdi",
                    "ceg",
                    "ceh",
                    "cei",
                    "cfg",
                    "cfh",
                    "cfi",
                ],
            ),
            ("7", ["p", "q", "r", "s"]),
            ("9", ["w", "x", "y", "z"]),
            (
                "79",
                [
                    "pw",
                    "px",
                    "py",
                    "pz",
                    "qw",
                    "qx",
                    "qy",
                    "qz",
                    "rw",
                    "rx",
                    "ry",
                    "rz",
                    "sw",
                    "sx",
                    "sy",
                    "sz",
                ],
            ),
            ("22", ["aa", "ab", "ac", "ba", "bb", "bc", "ca", "cb", "cc"]),
            (
                "3456",
                [
                    "dgjm",
                    "dgjn",
                    "dgjo",
                    "dgkm",
                    "dgkn",
                    "dgko",
                    "dglm",
                    "dgln",
                    "dglo",
                    "dhjm",
                    "dhjn",
                    "dhjo",
                    "dhkm",
                    "dhkn",
                    "dhko",
                    "dhlm",
                    "dhln",
                    "dhlo",
                    "dijm",
                    "dijn",
                    "dijo",
                    "dikm",
                    "dikn",
                    "diko",
                    "dilm",
                    "diln",
                    "dilo",
                    "egjm",
                    "egjn",
                    "egjo",
                    "egkm",
                    "egkn",
                    "egko",
                    "eglm",
                    "egln",
                    "eglo",
                    "ehjm",
                    "ehjn",
                    "ehjo",
                    "ehkm",
                    "ehkn",
                    "ehko",
                    "ehlm",
                    "ehln",
                    "ehlo",
                    "eijm",
                    "eijn",
                    "eijo",
                    "eikm",
                    "eikn",
                    "eiko",
                    "eilm",
                    "eiln",
                    "eilo",
                    "fgjm",
                    "fgjn",
                    "fgjo",
                    "fgkm",
                    "fgkn",
                    "fgko",
                    "fglm",
                    "fgln",
                    "fglo",
                    "fhjm",
                    "fhjn",
                    "fhjo",
                    "fhkm",
                    "fhkn",
                    "fhko",
                    "fhlm",
                    "fhln",
                    "fhlo",
                    "fijm",
                    "fijn",
                    "fijo",
                    "fikm",
                    "fikn",
                    "fiko",
                    "film",
                    "filn",
                    "filo",
                ],
            ),
            ("25", ["aj", "ak", "al", "bj", "bk", "bl", "cj", "ck", "cl"]),
            ("78", ["pt", "pu", "pv", "qt", "qu", "qv", "rt", "ru", "rv", "st", "su", "sv"]),
            ("89", ["tw", "tx", "ty", "tz", "uw", "ux", "uy", "uz", "vw", "vx", "vy", "vz"]),
        ],
    )
    def test_letter_combinations(self, digits: str, expected: list[str]):
        result = run_letter_combinations(Solution, digits)
        assert_letter_combinations(result, expected)
