import pytest

from leetcode_py import logged_test

from .helpers import assert_is_valid_sudoku, run_is_valid_sudoku
from .solution import Solution


class TestValidSudoku:
    def setup_method(self):
        self.solution = Solution()

    @logged_test
    @pytest.mark.parametrize(
        "board, expected",
        [
            # Valid sudoku example 1
            (
                [
                    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
                    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                    [".", "9", "8", ".", ".", ".", ".", "6", "."],
                    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                    [".", "6", ".", ".", ".", ".", "2", "8", "."],
                    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
                ],
                True,
            ),
            # Invalid sudoku example 2 (duplicate 8 in top-left box)
            (
                [
                    ["8", "3", ".", ".", "7", ".", ".", ".", "."],
                    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                    [".", "9", "8", ".", ".", ".", ".", "6", "."],
                    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                    [".", "6", ".", ".", ".", ".", "2", "8", "."],
                    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
                ],
                False,
            ),
            # Empty board (valid)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                True,
            ),
            # Duplicate in row (invalid)
            (
                [
                    ["1", "1", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                False,
            ),
            # Duplicate in column (invalid)
            (
                [
                    ["1", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["1", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                False,
            ),
            # Duplicate in 3x3 box (invalid)
            (
                [
                    ["1", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", "1", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                False,
            ),
            # Valid single row filled
            (
                [
                    ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                True,
            ),
            # Valid single column filled
            (
                [
                    ["1", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["2", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["3", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["4", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["5", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["6", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["7", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["8", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["9", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                True,
            ),
            # Valid 3x3 box filled (top-left)
            (
                [
                    ["1", "2", "3", ".", ".", ".", ".", ".", "."],
                    ["4", "5", "6", ".", ".", ".", ".", ".", "."],
                    ["7", "8", "9", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                True,
            ),
            # Duplicate in middle 3x3 box (invalid)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", "5", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", "5", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                False,
            ),
            # Duplicate in bottom-right 3x3 box (invalid)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", "7", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", "7", "."],
                ],
                False,
            ),
            # Multiple duplicates in same row (invalid)
            (
                [
                    ["3", "3", "3", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                False,
            ),
            # Duplicate in last row (invalid)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    ["9", ".", ".", ".", ".", ".", ".", ".", "9"],
                ],
                False,
            ),
            # Duplicate in last column (invalid)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "4"],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "4"],
                ],
                False,
            ),
            # Valid with all digits 1-9 in different positions
            (
                [
                    ["1", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", "2", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", "3", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", "4", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", "5", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", "6", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", "7", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", "8", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "9"],
                ],
                True,
            ),
            # Valid board with multiple possible solutions (demonstrates "not necessarily solvable" constraint)
            (
                [
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", "1", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                    [".", ".", ".", ".", ".", ".", ".", ".", "."],
                ],
                True,
            ),
        ],
    )
    def test_is_valid_sudoku(self, board: list[list[str]], expected: bool):
        result = run_is_valid_sudoku(Solution, board)
        assert_is_valid_sudoku(result, expected)
