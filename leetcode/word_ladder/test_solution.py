import pytest

from leetcode_py.test_utils import logged_test

from .helpers import assert_ladder_length, run_ladder_length
from .solution import Solution


class TestWordLadder:
    def setup_method(self):
        self.solution = Solution()

    @logged_test
    @pytest.mark.parametrize(
        "begin_word, end_word, word_list, expected",
        [
            ("hit", "cog", ["hot", "dot", "dog", "lot", "log", "cog"], 5),
            ("hit", "cog", ["hot", "dot", "dog", "lot", "log"], 0),
            ("a", "c", ["a", "b", "c"], 2),
            ("hot", "dog", ["hot", "dog"], 0),
            ("hot", "dog", ["hot", "hog", "dog"], 3),
            ("red", "tax", ["ted", "tex", "red", "tax", "tad", "den", "rex", "pee"], 4),
            ("talk", "tail", ["talk", "tons", "fall", "tail", "gale", "hall", "negs"], 0),
            (
                "qa",
                "sq",
                [
                    "si",
                    "go",
                    "se",
                    "cm",
                    "so",
                    "ph",
                    "mt",
                    "db",
                    "mb",
                    "sb",
                    "kr",
                    "ln",
                    "tm",
                    "le",
                    "av",
                    "sm",
                    "ar",
                    "ci",
                    "ca",
                    "br",
                    "ti",
                    "ba",
                    "to",
                    "ra",
                    "fa",
                    "yo",
                    "ow",
                    "sn",
                    "ya",
                    "cr",
                    "po",
                    "fe",
                    "ho",
                    "ma",
                    "re",
                    "or",
                    "rn",
                    "au",
                    "ur",
                    "rh",
                    "sr",
                    "tc",
                    "lt",
                    "lo",
                    "as",
                    "fr",
                    "nb",
                    "yb",
                    "if",
                    "pb",
                    "ge",
                    "th",
                    "pm",
                    "rb",
                    "sh",
                    "co",
                    "ga",
                    "li",
                    "ha",
                    "hz",
                    "no",
                    "bi",
                    "di",
                    "hi",
                    "qa",
                    "pi",
                    "os",
                    "uh",
                    "wm",
                    "an",
                    "me",
                    "mo",
                    "na",
                    "la",
                    "st",
                    "er",
                    "sc",
                    "ne",
                    "mn",
                    "mi",
                    "am",
                    "ex",
                    "pt",
                    "io",
                    "be",
                    "fm",
                    "ta",
                    "tb",
                    "ni",
                    "mr",
                    "pa",
                    "he",
                    "lr",
                    "sq",
                    "ye",
                ],
                5,
            ),
            ("cet", "ism", ["kid", "tag", "pup", "ail", "tun", "woo"], 0),
            ("lost", "miss", ["most", "mist", "miss", "lost", "fist", "fish"], 4),
            ("cat", "dog", ["bat", "bag", "dag", "dog", "cat"], 5),
            ("game", "thee", ["frye", "heat", "tree", "thee", "game", "free"], 0),
            ("teach", "place", ["peale", "wilts", "place", "fetch"], 0),
            ("sail", "boat", ["bail", "foil", "coat", "boat", "sail"], 0),
            ("cold", "warm", ["cold", "cord", "word", "ward", "warm"], 5),
        ],
    )
    def test_ladder_length(self, begin_word: str, end_word: str, word_list: list[str], expected: int):
        result = run_ladder_length(Solution, begin_word, end_word, word_list)
        assert_ladder_length(result, expected)
