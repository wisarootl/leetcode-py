{
    "problem_name": "diagonal_traverse",
    "solution_class_name": "Solution",
    "problem_number": "498",
    "problem_title": "Diagonal Traverse",
    "difficulty": "Medium",
    "topics": "Array, Matrix, Simulation",
    "_tags": { "list": [] },
    "readme_description": "Given an `m x n` matrix `mat`, return *an array of all the elements of the array in a diagonal order*.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Diagonal Traverse](https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg)\n\n```\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,4,7,5,3,6,8,9]\n```"
            },
            { "content": "```\nInput: mat = [[1,2],[3,4]]\nOutput: [1,2,3,4]\n```" }
        ]
    },
    "readme_constraints": "- `m == mat.length`\n- `n == mat[i].length`\n- `1 <= m, n <= 10^4`\n- `1 <= m * n <= 10^4`\n- `-10^5 <= mat[i][j] <= 10^5`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "find_diagonal_order",
    "helpers_run_signature": "(solution_class: type, mat: list[list[int]])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.find_diagonal_order(mat)",
    "helpers_assert_name": "find_diagonal_order",
    "helpers_assert_signature": "(result: list[int], expected: list[int]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_find_diagonal_order, run_find_diagonal_order\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "DiagonalTraverse",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "find_diagonal_order",
                "signature": "(self, mat: list[list[int]]) -> list[int]",
                "body": "        # TODO: Implement find_diagonal_order\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_find_diagonal_order",
                "signature": "(self, mat: list[list[int]], expected: list[int])",
                "parametrize": "mat, expected",
                "test_cases": "[([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 4, 7, 5, 3, 6, 8, 9]), ([[1, 2], [3, 4]], [1, 2, 3, 4]), ([[1]], [1]), ([[1, 2, 3]], [1, 2, 3]), ([[1], [2], [3]], [1, 2, 3]), ([[1, 2, 3, 4], [5, 6, 7, 8]], [1, 2, 5, 6, 3, 4, 7, 8]), ([[1, 2], [3, 4], [5, 6]], [1, 2, 3, 5, 4, 6]), ([[1, 2, 3, 4, 5]], [1, 2, 3, 4, 5]), ([[1], [2], [3], [4], [5]], [1, 2, 3, 4, 5]), ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [1, 2, 5, 9, 6, 3, 4, 7, 10, 11, 8, 12]), ([[-1, 0, 1], [2, -3, 4]], [-1, 0, 2, -3, 1, 4]), ([[100]], [100])]",
                "body": "        result = run_find_diagonal_order(Solution, mat)\n        assert_find_diagonal_order(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_find_diagonal_order, assert_find_diagonal_order\nfrom solution import Solution",
    "playground_setup": "# Example test case\nmat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nexpected = [1, 2, 4, 7, 5, 3, 6, 8, 9]",
    "playground_run": "result = run_find_diagonal_order(Solution, mat)\nresult",
    "playground_assert": "assert_find_diagonal_order(result, expected)"
}
