{
    "problem_name": "reverse_linked_list_ii",
    "solution_class_name": "Solution",
    "problem_number": "92",
    "problem_title": "Reverse Linked List II",
    "difficulty": "Medium",
    "topics": "Linked List",
    "_tags": { "list": [] },
    "readme_description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n```"
            },
            { "content": "```\nInput: head = [5], left = 1, right = 1\nOutput: [5]\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the list is n\n- 1 <= n <= 500\n- -500 <= Node.val <= 500\n- 1 <= left <= right <= n",
    "readme_additional": "**Follow up:** Could you do it in one pass?",
    "helpers_imports": "from leetcode_py import ListNode",
    "helpers_content": "",
    "helpers_run_name": "reverse_between",
    "helpers_run_signature": "(solution_class: type, head_list: list[int], left: int, right: int)",
    "helpers_run_body": "    head = ListNode[int].from_list(head_list)\n    implementation = solution_class()\n    return implementation.reverse_between(head, left, right)",
    "helpers_assert_name": "reverse_between",
    "helpers_assert_signature": "(result: ListNode[int] | None, expected_list: list[int]) -> bool",
    "helpers_assert_body": "    expected = ListNode[int].from_list(expected_list)\n    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_reverse_between, run_reverse_between\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "ReverseLinkedListII",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "reverse_between",
                "signature": "(self, head: ListNode[int] | None, left: int, right: int) -> ListNode[int] | None",
                "body": "        # TODO: Implement reverse_between\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_reverse_between",
                "signature": "(self, head_list: list[int], left: int, right: int, expected_list: list[int])",
                "parametrize": "head_list, left, right, expected_list",
                "test_cases": "[([1, 2, 3, 4, 5], 2, 4, [1, 4, 3, 2, 5]), ([5], 1, 1, [5]), ([1, 2], 1, 2, [2, 1]), ([1, 2, 3], 1, 3, [3, 2, 1]), ([1, 2, 3, 4, 5], 1, 5, [5, 4, 3, 2, 1]), ([1, 2, 3, 4, 5], 3, 3, [1, 2, 3, 4, 5]), ([1, 2, 3, 4], 2, 3, [1, 3, 2, 4]), ([1, 2, 3, 4, 5, 6], 3, 5, [1, 2, 5, 4, 3, 6]), ([10], 1, 1, [10]), ([1, 2, 3, 4, 5, 6, 7], 1, 7, [7, 6, 5, 4, 3, 2, 1]), ([3, 5], 1, 1, [3, 5]), ([7, 9, 2, 10, 1, 8, 6], 4, 6, [7, 9, 2, 8, 1, 10, 6])]",
                "body": "        result = run_reverse_between(Solution, head_list, left, right)\n        assert_reverse_between(result, expected_list)"
            }
        ]
    },
    "playground_imports": "from helpers import run_reverse_between, assert_reverse_between\nfrom solution import Solution\nfrom leetcode_py import ListNode",
    "playground_setup": "# Example test case\nhead_list = [1, 2, 3, 4, 5]\nleft, right = 2, 4\nexpected_list = [1, 4, 3, 2, 5]",
    "playground_run": "result = run_reverse_between(Solution, head_list, left, right)\nresult",
    "playground_assert": "assert_reverse_between(result, expected_list)"
}
