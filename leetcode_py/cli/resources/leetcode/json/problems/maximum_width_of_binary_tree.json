{
    "problem_name": "maximum_width_of_binary_tree",
    "solution_class_name": "Solution",
    "problem_number": "662",
    "problem_title": "Maximum Width of Binary Tree",
    "difficulty": "Medium",
    "topics": "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    "_tags": { "list": ["grind"] },
    "readme_description": "Given the `root` of a binary tree, return *the **maximum width** of the given tree*.\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\nThe **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\nIt is **guaranteed** that the answer will in the range of a **32-bit** signed integer.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg)\n\n```\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\n```"
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg)\n\n```\nInput: root = [1,3,2,5,null,null,9,6,null,7]\nOutput: 7\nExplanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n```"
            },
            {
                "content": "![Example 3](https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg)\n\n```\nInput: root = [1,3,2,5]\nOutput: 2\nExplanation: The maximum width exists in the second level with length 2 (3,2).\n```"
            }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is in the range `[1, 3000]`.\n- `-100 <= Node.val <= 100`",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "width_of_binary_tree",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None])",
    "helpers_run_body": "    root = TreeNode[int].from_list(root_list)\n    implementation = solution_class()\n    return implementation.width_of_binary_tree(root)",
    "helpers_assert_name": "width_of_binary_tree",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_width_of_binary_tree, run_width_of_binary_tree\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MaximumWidthOfBinaryTree",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "width_of_binary_tree",
                "signature": "(self, root: TreeNode[int] | None) -> int",
                "body": "        # TODO: Implement width_of_binary_tree\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_width_of_binary_tree",
                "signature": "(self, root_list: list[int | None], expected: int)",
                "parametrize": "root_list, expected",
                "test_cases": "[([1, 3, 2, 5, 3, None, 9], 4), ([1, 3, 2, 5, None, None, 9, 6, None, 7], 7), ([1, 3, 2, 5], 2), ([1], 1), ([1, 2], 1), ([1, None, 2], 1), ([1, 2, 3], 2), ([1, 2, 3, 4], 2), ([1, 2, 3, 4, 5], 2), ([1, 2, 3, None, None, 4, 5], 2), ([1, 2, 3, None, 4, None, 5], 3), ([1, 2, 3, 4, None, None, 5, 6], 4), ([1, None, 2, None, 3, None, 4], 1), ([1, 2, None, 3, None, 4], 1), ([1, 2, 3, 4, 5, 6, 7], 4), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 8)]",
                "body": "        result = run_width_of_binary_tree(Solution, root_list)\n        assert_width_of_binary_tree(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_width_of_binary_tree, assert_width_of_binary_tree\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list: list[int | None] = [1, 3, 2, 5, 3, None, 9]\nexpected = 4",
    "playground_run": "result = run_width_of_binary_tree(Solution, root_list)\nresult",
    "playground_assert": "assert_width_of_binary_tree(result, expected)"
}
