{
    "problem_name": "meeting_rooms",
    "solution_class_name": "Solution",
    "problem_number": "252",
    "problem_title": "Meeting Rooms",
    "difficulty": "Easy",
    "topics": "Array, Sorting",
    "_tags": { "list": ["blind-75"] },
    "readme_description": "Given an array of meeting time intervals consisting of start and end times `[[s1,e1],[s2,e2],...]` (si < ei), determine if a person could attend all meetings.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: [[0,30],[5,10],[15,20]]\nOutput: false\n```" },
            { "content": "```\nInput: [[7,10],[2,4]]\nOutput: true\n```" }
        ]
    },
    "readme_constraints": "- 0 <= intervals.length <= 10^4\n- intervals[i].length == 2\n- 0 <= starti < endi <= 10^6",
    "readme_additional": "**Note:** Input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "can_attend_meetings",
    "helpers_run_signature": "(solution_class: type, intervals: list[list[int]])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.can_attend_meetings(intervals)",
    "helpers_assert_name": "can_attend_meetings",
    "helpers_assert_signature": "(result: bool, expected: bool) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_can_attend_meetings, run_can_attend_meetings\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MeetingRooms",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "can_attend_meetings",
                "signature": "(self, intervals: list[list[int]]) -> bool",
                "body": "        # TODO: Implement can_attend_meetings\n        return False"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_can_attend_meetings",
                "signature": "(self, intervals: list[list[int]], expected: bool)",
                "parametrize": "intervals, expected",
                "test_cases": {
                    "list": [
                        "([[0,30],[5,10],[15,20]], False)",
                        "([[7,10],[2,4]], True)",
                        "([], True)",
                        "([[1,5]], True)",
                        "([[1,5],[8,9]], True)",
                        "([[1,5],[2,6]], False)",
                        "([[0,1],[1,2]], True)",
                        "([[0,2],[1,3]], False)",
                        "([[1,3],[2,4],[3,5]], False)",
                        "([[1,2],[3,4],[5,6]], True)",
                        "([[0,5],[5,10],[10,15]], True)",
                        "([[1,4],[2,3]], False)",
                        "([[1,10],[2,3],[4,5]], False)",
                        "([[9,10],[4,9],[4,17]], False)",
                        "([[2,7]], True)",
                        "([[1,13],[13,15]], True)",
                        "([[6,7],[2,4],[8,12]], True)",
                        "([[13,15],[1,13]], True)"
                    ]
                },
                "body": "        result = run_can_attend_meetings(Solution, intervals)\n        assert_can_attend_meetings(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_can_attend_meetings, assert_can_attend_meetings\nfrom solution import Solution",
    "playground_setup": "# Example test case\nintervals = [[0,30],[5,10],[15,20]]\nexpected = False",
    "playground_run": "result = run_can_attend_meetings(Solution, intervals)\nresult",
    "playground_assert": "assert_can_attend_meetings(result, expected)"
}
