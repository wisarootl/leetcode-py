{
    "problem_name": "diameter_of_binary_tree",
    "solution_class_name": "Solution",
    "problem_number": "543",
    "problem_title": "Diameter of Binary Tree",
    "difficulty": "Easy",
    "topics": "Tree, Depth-First Search, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given the `root` of a binary tree, return the length of the **diameter** of the tree.\n\nThe **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\nThe **length** of a path between two nodes is represented by the number of edges between them.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg)\n\n```\nInput: root = [1,2,3,4,5]\nOutput: 3\n```\n**Explanation:** 3 is the length of the path [4,2,1,3] or [5,2,1,3]."
            },
            { "content": "```\nInput: root = [1,2]\nOutput: 1\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is in the range [1, 10^4].\n- -100 <= Node.val <= 100",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "diameter_of_binary_tree",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None])",
    "helpers_run_body": "    root = TreeNode[int].from_list(root_list)\n    implementation = solution_class()\n    return implementation.diameter_of_binary_tree(root)",
    "helpers_assert_name": "diameter_of_binary_tree",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_diameter_of_binary_tree, run_diameter_of_binary_tree\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "DiameterOfBinaryTree",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "diameter_of_binary_tree",
                "signature": "(self, root: TreeNode[int] | None) -> int",
                "body": "        # TODO: Implement diameter_of_binary_tree\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_diameter_of_binary_tree",
                "signature": "(self, root_list: list[int | None], expected: int)",
                "parametrize": "root_list, expected",
                "test_cases": "[([1, 2, 3, 4, 5], 3), ([1, 2], 1), ([], 0), ([1], 0), ([1, 2, 3], 2), ([1, None, 2], 1), ([1, 2, 3, 4, 5, None, None, 6, 7], 4), ([4, 2, 6, 1, 3, 5, 7], 4), ([1, 2, None, 3, None, 4], 3), ([1, 2, 3, None, None, 4, 5, None, None, 6, 7], 4), ([10, 5, 15, 3, 7, 12, 20], 4), ([1, None, 2, None, 3, None, 4], 3)]",
                "body": "        result = run_diameter_of_binary_tree(Solution, root_list)\n        assert_diameter_of_binary_tree(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_diameter_of_binary_tree, assert_diameter_of_binary_tree\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list: list[int | None] = [1, 2, 3, 4, 5]\nexpected = 3",
    "playground_run": "result = run_diameter_of_binary_tree(Solution, root_list)\nresult",
    "playground_assert": "assert_diameter_of_binary_tree(result, expected)"
}
