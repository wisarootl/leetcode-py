{
    "problem_name": "find_minimum_in_rotated_sorted_array",
    "solution_class_name": "Solution",
    "problem_number": "153",
    "problem_title": "Find Minimum in Rotated Sorted Array",
    "difficulty": "Medium",
    "topics": "Array, Binary Search",
    "_tags": { "list": ["blind-75"] },
    "readme_description": "Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n- `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n- `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.\n\nYou must write an algorithm that runs in O(log n) time.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n```"
            },
            {
                "content": "```\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n```"
            },
            {
                "content": "```\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times.\n```"
            }
        ]
    },
    "readme_constraints": "- n == nums.length\n- 1 <= n <= 5000\n- -5000 <= nums[i] <= 5000\n- All the integers of nums are **unique**.\n- nums is sorted and rotated between 1 and n times.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "find_min",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.find_min(nums)",
    "helpers_assert_name": "find_min",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_find_min, run_find_min\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "FindMinimumInRotatedSortedArray",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "find_min",
                "signature": "(self, nums: list[int]) -> int",
                "body": "        # TODO: Implement find_min\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_find_min",
                "signature": "(self, nums: list[int], expected: int)",
                "parametrize": "nums, expected",
                "test_cases": {
                    "list": [
                        "([3, 4, 5, 1, 2], 1)",
                        "([4, 5, 6, 7, 0, 1, 2], 0)",
                        "([11, 13, 15, 17], 11)",
                        "([1], 1)",
                        "([2, 1], 1)",
                        "([1, 2, 3], 1)",
                        "([3, 1, 2], 1)",
                        "([2, 3, 1], 1)",
                        "([4, 5, 6, 7, 8, 1, 2, 3], 1)",
                        "([5, 6, 7, 8, 9, 10, 1, 2, 3, 4], 1)",
                        "([6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5], 1)",
                        "([7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6], 1)",
                        "([8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3, 4, 5, 6, 7], 1)",
                        "([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 2, 3, 4, 5, 6, 7, 8], 1)",
                        "([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1)"
                    ]
                },
                "body": "        result = run_find_min(Solution, nums)\n        assert_find_min(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_find_min, assert_find_min\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums: list[int] = [3, 4, 5, 1, 2]\nexpected: int = 1",
    "playground_run": "result = run_find_min(Solution, nums)\nresult",
    "playground_assert": "assert_find_min(result, expected)"
}
