{
    "problem_name": "set_matrix_zeroes",
    "solution_class_name": "Solution",
    "problem_number": "73",
    "problem_title": "Set Matrix Zeroes",
    "difficulty": "Medium",
    "topics": "Array, Hash Table, Matrix",
    "_tags": { "list": ["blind-75"] },
    "readme_description": "Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s. You must do it in place.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg)\n\n```\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n```"
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg)\n\n```\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n```"
            }
        ]
    },
    "readme_constraints": "- m == matrix.length\n- n == matrix[i].length\n- 1 <= m, n <= 200\n- -2^31 <= matrix[i][j] <= 2^31 - 1",
    "readme_additional": "- Follow up: Could you devise a constant space solution?",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "set_zeroes",
    "helpers_run_signature": "(solution_class: type, matrix: list[list[int]])",
    "helpers_run_body": "    import copy\n    matrix_copy = copy.deepcopy(matrix)\n    implementation = solution_class()\n    implementation.set_zeroes(matrix_copy)\n    return matrix_copy",
    "helpers_assert_name": "set_zeroes",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_set_zeroes, run_set_zeroes\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "SetMatrixZeroes",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "set_zeroes",
                "signature": "(self, matrix: list[list[int]]) -> None",
                "body": "        # TODO: Implement set_zeroes\n        pass"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_set_zeroes",
                "signature": "(self, matrix: list[list[int]], expected: list[list[int]])",
                "parametrize": "matrix, expected",
                "test_cases": "[([[1,1,1],[1,0,1],[1,1,1]], [[1,0,1],[0,0,0],[1,0,1]]), ([[0,1,2,0],[3,4,5,2],[1,3,1,5]], [[0,0,0,0],[0,4,5,0],[0,3,1,0]]), ([[1]], [[1]]), ([[0]], [[0]]), ([[1,0]], [[0,0]]), ([[0,1]], [[0,0]]), ([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3],[4,5,6],[7,8,9]]), ([[1,2,0],[4,5,6],[7,8,9]], [[0,0,0],[4,5,0],[7,8,0]]), ([[0,2,3],[4,5,6],[7,8,9]], [[0,0,0],[0,5,6],[0,8,9]]), ([[1,2,3],[4,0,6],[7,8,0]], [[1,0,0],[0,0,0],[0,0,0]]), ([[1,2],[0,4],[5,6]], [[0,2],[0,0],[0,6]]), ([[1,2,3],[4,5,6]], [[1,2,3],[4,5,6]]), ([[0,2,0],[4,5,6]], [[0,0,0],[0,5,0]]), ([[-1,2,3],[4,0,-6]], [[-1,0,3],[0,0,0]]), ([[1,2,3,4],[0,5,0,7],[8,9,10,11]], [[0,2,0,4],[0,0,0,0],[0,9,0,11]])]",
                "body": "        result = run_set_zeroes(Solution, matrix)\n        assert_set_zeroes(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_set_zeroes, assert_set_zeroes\nfrom solution import Solution",
    "playground_setup": "# Example test case\nmatrix = [[1,1,1],[1,0,1],[1,1,1]]\nexpected = [[1,0,1],[0,0,0],[1,0,1]]",
    "playground_run": "result = run_set_zeroes(Solution, matrix)\nresult",
    "playground_assert": "assert_set_zeroes(result, expected)"
}
