{
    "problem_name": "best_time_to_buy_and_sell_stock",
    "solution_class_name": "Solution",
    "problem_number": "121",
    "problem_title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "topics": "Array, Dynamic Programming",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn *the maximum profit you can achieve from this transaction*. If you cannot achieve any profit, return `0`.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\n```\n**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
            },
            {
                "content": "```\nInput: prices = [7,6,4,3,1]\nOutput: 0\n```\n**Explanation:** In this case, no transactions are done and the max profit = 0."
            }
        ]
    },
    "readme_constraints": "- 1 <= prices.length <= 10^5\n- 0 <= prices[i] <= 10^4",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "max_profit",
    "helpers_run_signature": "(solution_class: type, prices: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.max_profit(prices)",
    "helpers_assert_name": "max_profit",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_max_profit, run_max_profit\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "BestTimeToBuyAndSellStock",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "max_profit",
                "signature": "(self, prices: list[int]) -> int",
                "body": "        # TODO: Implement max_profit\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_max_profit",
                "signature": "(self, prices: list[int], expected: int)",
                "parametrize": "prices, expected",
                "test_cases": "[([7, 1, 5, 3, 6, 4], 5), ([7, 6, 4, 3, 1], 0), ([1, 2, 3, 4, 5], 4), ([5, 4, 3, 2, 1], 0), ([1], 0), ([2, 1], 0), ([1, 2], 1), ([3, 2, 6, 5, 0, 3], 4), ([2, 4, 1], 2), ([1, 5, 3, 6, 4], 5), ([10, 1, 5, 6, 7, 1], 6), ([6, 1, 3, 2, 4, 7], 6), ([1, 4, 2], 3), ([3, 3, 5, 0, 0, 3, 1, 4], 4), ([2, 1, 2, 1, 0, 1, 2], 2)]",
                "body": "        result = run_max_profit(Solution, prices)\n        assert_max_profit(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_max_profit, assert_max_profit\nfrom solution import Solution",
    "playground_setup": "# Example test case\nprices = [7, 1, 5, 3, 6, 4]\nexpected = 5",
    "playground_run": "result = run_max_profit(Solution, prices)\nresult",
    "playground_assert": "assert_max_profit(result, expected)"
}
