{
    "problem_name": "sort_colors",
    "solution_class_name": "Solution",
    "problem_number": "75",
    "problem_title": "Sort Colors",
    "difficulty": "Medium",
    "topics": "Array, Two Pointers, Sorting",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them **in-place** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n```" },
            { "content": "```\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n```" }
        ]
    },
    "readme_constraints": "- `n == nums.length`\n- `1 <= n <= 300`\n- `nums[i]` is either `0`, `1`, or `2`.",
    "readme_additional": "**Follow up:** Could you come up with a one-pass algorithm using only constant extra space?",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "sort_colors",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    nums_copy = nums.copy()\n    implementation = solution_class()\n    implementation.sort_colors(nums_copy)\n    return nums_copy",
    "helpers_assert_name": "sort_colors",
    "helpers_assert_signature": "(result: list[int], expected: list[int]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_sort_colors, run_sort_colors\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "SortColors",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "sort_colors",
                "signature": "(self, nums: list[int]) -> None",
                "body": "        # TODO: Implement sort_colors\n        pass"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_sort_colors",
                "signature": "(self, nums: list[int], expected: list[int])",
                "parametrize": "nums, expected",
                "test_cases": "[([2, 0, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2]), ([2, 0, 1], [0, 1, 2]), ([0], [0]), ([1], [1]), ([2], [2]), ([0, 1, 2], [0, 1, 2]), ([2, 2, 2], [2, 2, 2]), ([0, 0, 0], [0, 0, 0]), ([1, 1, 1], [1, 1, 1]), ([2, 1, 0], [0, 1, 2]), ([1, 0, 2, 1, 0, 2], [0, 0, 1, 1, 2, 2]), ([0, 2, 1, 0, 2, 1], [0, 0, 1, 1, 2, 2]), ([2, 2, 1, 0, 0, 1], [0, 0, 1, 1, 2, 2]), ([1, 2, 0, 1, 2, 0, 1], [0, 0, 1, 1, 1, 2, 2]), ([0, 1, 0, 2, 1, 2, 0], [0, 0, 0, 1, 1, 2, 2])]",
                "body": "        result = run_sort_colors(Solution, nums)\n        assert_sort_colors(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_sort_colors, assert_sort_colors\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [2, 0, 2, 1, 1, 0]\nexpected = [0, 0, 1, 1, 2, 2]",
    "playground_run": "result = run_sort_colors(Solution, nums)\nresult",
    "playground_assert": "assert_sort_colors(result, expected)"
}
