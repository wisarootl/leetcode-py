{
    "problem_name": "median_of_two_sorted_arrays",
    "solution_class_name": "Solution",
    "problem_number": "4",
    "problem_title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "topics": "Array, Binary Search, Divide and Conquer",
    "_tags": { "list": ["algo-master-75"] },
    "readme_description": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n```"
            },
            {
                "content": "```\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n```"
            }
        ]
    },
    "readme_constraints": "- nums1.length == m\n- nums2.length == n\n- 0 <= m <= 1000\n- 0 <= n <= 1000\n- 1 <= m + n <= 2000\n- -10^6 <= nums1[i], nums2[i] <= 10^6",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "find_median_sorted_arrays",
    "helpers_run_signature": "(solution_class: type, nums1: list[int], nums2: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.find_median_sorted_arrays(nums1, nums2)",
    "helpers_assert_name": "find_median_sorted_arrays",
    "helpers_assert_signature": "(result: float, expected: float) -> bool",
    "helpers_assert_body": "    assert abs(result - expected) < 1e-5\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_find_median_sorted_arrays, run_find_median_sorted_arrays\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MedianOfTwoSortedArrays",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "find_median_sorted_arrays",
                "signature": "(self, nums1: list[int], nums2: list[int]) -> float",
                "body": "        # TODO: Implement find_median_sorted_arrays\n        return 0.0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_find_median_sorted_arrays",
                "signature": "(self, nums1: list[int], nums2: list[int], expected: float)",
                "parametrize": "nums1, nums2, expected",
                "test_cases": {
                    "list": [
                        "([1, 3], [2], 2.0)",
                        "([1, 2], [3, 4], 2.5)",
                        "([1], [], 1.0)",
                        "([], [1], 1.0)",
                        "([1, 2, 3], [], 2.0)",
                        "([], [1, 2, 3], 2.0)",
                        "([1, 2, 3, 4], [], 2.5)",
                        "([], [1, 2, 3, 4], 2.5)",
                        "([1, 3, 5], [2, 4, 6], 3.5)",
                        "([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5.5)",
                        "([1, 2, 3, 4, 5, 6], [7, 8, 9, 10], 5.5)",
                        "([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11], 6.0)",
                        "([1, 2, 3, 4, 5, 6, 7], [8, 9, 10], 5.5)",
                        "([1, 2, 3, 4, 5, 6, 7, 8], [9, 10], 5.5)",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9], [10], 5.5)",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [], 5.5)",
                        "([1, 1, 1, 1], [2, 2, 2, 2], 1.5)",
                        "([1, 1, 1, 1, 1], [2, 2, 2, 2], 1.0)"
                    ]
                },
                "body": "        result = run_find_median_sorted_arrays(Solution, nums1, nums2)\n        assert_find_median_sorted_arrays(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_find_median_sorted_arrays, assert_find_median_sorted_arrays\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums1 = [1, 3]\nnums2 = [2]\nexpected = 2.0",
    "playground_run": "result = run_find_median_sorted_arrays(Solution, nums1, nums2)\nresult",
    "playground_assert": "assert_find_median_sorted_arrays(result, expected)"
}
