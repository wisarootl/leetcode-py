{
    "problem_name": "search_in_rotated_sorted_array",
    "solution_class_name": "Solution",
    "problem_number": "33",
    "problem_title": "Search in Rotated Sorted Array",
    "difficulty": "Medium",
    "topics": "Array, Binary Search",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "There is an integer array `nums` sorted in ascending order (with **distinct** values).\n\nPrior to being passed to your function, `nums` is **possibly left rotated** at an unknown index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be left rotated by 3 indices and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` **after** the possible rotation and an integer `target`, return *the index of* `target` *if it is in* `nums`*, or* `-1` *if it is not in* `nums`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\n```" },
            { "content": "```\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\n```" },
            { "content": "```\nInput: nums = [1], target = 0\nOutput: -1\n```" }
        ]
    },
    "readme_constraints": "- `1 <= nums.length <= 5000`\n- `-10^4 <= nums[i] <= 10^4`\n- All values of `nums` are **unique**.\n- `nums` is an ascending array that is possibly rotated.\n- `-10^4 <= target <= 10^4`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "search",
    "helpers_run_signature": "(solution_class: type, nums: list[int], target: int)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.search(nums, target)",
    "helpers_assert_name": "search",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_search, run_search\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "SearchInRotatedSortedArray",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "search",
                "signature": "(self, nums: list[int], target: int) -> int",
                "body": "        # TODO: Implement search\n        return -1"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_search",
                "signature": "(self, nums: list[int], target: int, expected: int)",
                "parametrize": "nums, target, expected",
                "test_cases": "[([4, 5, 6, 7, 0, 1, 2], 0, 4), ([4, 5, 6, 7, 0, 1, 2], 3, -1), ([1], 0, -1), ([1], 1, 0), ([3, 1], 1, 1), ([1, 3], 3, 1), ([2, 1], 2, 0), ([5, 1, 3], 3, 2), ([4, 5, 6, 7, 8, 1, 2, 3], 8, 4), ([6, 7, 0, 1, 2, 3, 4, 5], 6, 0), ([7, 0, 1, 2, 3, 4, 5, 6], 7, 0), ([0, 1, 2, 3, 4, 5, 6, 7], 4, 4), ([3, 4, 5, 6, 7, 0, 1, 2], 2, 7), ([9, 0, 2, 7, 8], 3, -1), ([8, 9, 2, 3, 4], 9, 1)]",
                "body": "        result = run_search(Solution, nums, target)\n        assert_search(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_search, assert_search\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [4, 5, 6, 7, 0, 1, 2]\ntarget = 0\nexpected = 4",
    "playground_run": "result = run_search(Solution, nums, target)\nresult",
    "playground_assert": "assert_search(result, expected)"
}
