{
    "problem_name": "merge_k_sorted_lists",
    "solution_class_name": "Solution",
    "problem_number": "23",
    "problem_title": "Merge k Sorted Lists",
    "difficulty": "Hard",
    "topics": "Linked List, Divide and Conquer, Heap (Priority Queue), Merge Sort",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\n*Merge all the linked-lists into one sorted linked-list and return it.*",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\n```\n**Explanation:** The linked-lists are:\n```\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n```\nmerging them into one sorted linked list:\n```\n1->1->2->3->4->4->5->6\n```"
            },
            { "content": "```\nInput: lists = []\nOutput: []\n```" },
            { "content": "```\nInput: lists = [[]]\nOutput: []\n```" }
        ]
    },
    "readme_constraints": "- `k == lists.length`\n- `0 <= k <= 10^4`\n- `0 <= lists[i].length <= 500`\n- `-10^4 <= lists[i][j] <= 10^4`\n- `lists[i]` is sorted in ascending order.\n- The sum of `lists[i].length` will not exceed `10^4`.",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import ListNode",
    "helpers_content": "",
    "helpers_run_name": "merge_k_lists",
    "helpers_run_signature": "(solution_class: type, lists_data: list[list[int]])",
    "helpers_run_body": "    lists = [ListNode[int].from_list(lst) for lst in lists_data]\n    implementation = solution_class()\n    return implementation.merge_k_lists(lists)",
    "helpers_assert_name": "merge_k_lists",
    "helpers_assert_signature": "(result: ListNode[int] | None, expected_data: list[int]) -> bool",
    "helpers_assert_body": "    expected = ListNode[int].from_list(expected_data)\n    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_merge_k_lists, run_merge_k_lists\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MergeKSortedLists",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "merge_k_lists",
                "signature": "(self, lists: list[ListNode[int] | None]) -> ListNode[int] | None",
                "body": "        # TODO: Implement merge_k_lists\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_merge_k_lists",
                "signature": "(self, lists_data: list[list[int]], expected_data: list[int])",
                "parametrize": "lists_data, expected_data",
                "test_cases": "[([[1, 4, 5], [1, 3, 4], [2, 6]], [1, 1, 2, 3, 4, 4, 5, 6]), ([], []), ([[]], []), ([[1]], [1]), ([[1, 2], [3, 4]], [1, 2, 3, 4]), ([[5], [1, 3], [2, 4, 6]], [1, 2, 3, 4, 5, 6]), ([[-1, 0, 1], [-2, 2]], [-2, -1, 0, 1, 2]), ([[1, 1, 1], [2, 2, 2]], [1, 1, 1, 2, 2, 2]), ([[], [1], []], [1]), ([[0, 0, 0], [1, 1, 1]], [0, 0, 0, 1, 1, 1]), ([[10], [5], [1]], [1, 5, 10]), ([[1, 2, 3, 4, 5]], [1, 2, 3, 4, 5]), ([[-10, -5], [-8, -3], [-6, -1]], [-10, -8, -6, -5, -3, -1]), ([[100]], [100]), ([[1, 3, 5], [2, 4, 6], [7, 8, 9]], [1, 2, 3, 4, 5, 6, 7, 8, 9])]",
                "body": "        result = run_merge_k_lists(Solution, lists_data)\n        assert_merge_k_lists(result, expected_data)"
            }
        ]
    },
    "playground_imports": "from helpers import run_merge_k_lists, assert_merge_k_lists\nfrom solution import Solution\nfrom leetcode_py import ListNode",
    "playground_setup": "# Example test case\nlists_data = [[1, 4, 5], [1, 3, 4], [2, 6]]\nexpected_data = [1, 1, 2, 3, 4, 4, 5, 6]",
    "playground_run": "result = run_merge_k_lists(Solution, lists_data)\nListNode[int].to_list(result) if result else []",
    "playground_assert": "assert_merge_k_lists(result, expected_data)"
}
