{
    "problem_name": "construct_binary_tree_from_preorder_and_inorder_traversal",
    "solution_class_name": "Solution",
    "problem_number": "105",
    "problem_title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "difficulty": "Medium",
    "topics": "Array, Hash Table, Divide and Conquer, Tree, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)\n\n```\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n```"
            },
            { "content": "```\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n```" }
        ]
    },
    "readme_constraints": "- 1 <= preorder.length <= 3000\n- inorder.length == preorder.length\n- -3000 <= preorder[i], inorder[i] <= 3000\n- preorder and inorder consist of unique values.\n- Each value of inorder also appears in preorder.\n- preorder is guaranteed to be the preorder traversal of the tree.\n- inorder is guaranteed to be the inorder traversal of the tree.",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "build_tree",
    "helpers_run_signature": "(solution_class: type, preorder: list[int], inorder: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.build_tree(preorder, inorder)",
    "helpers_assert_name": "build_tree",
    "helpers_assert_signature": "(result: TreeNode | None, expected_list: list[int | None]) -> bool",
    "helpers_assert_body": "    expected = TreeNode.from_list(expected_list) if expected_list else None\n    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_build_tree, run_build_tree\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "ConstructBinaryTreeFromPreorderAndInorderTraversal",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "build_tree",
                "signature": "(self, preorder: list[int], inorder: list[int]) -> TreeNode | None",
                "body": "        # TODO: Implement build_tree\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_build_tree",
                "signature": "(self, preorder: list[int], inorder: list[int], expected_list: list[int | None])",
                "parametrize": "preorder, inorder, expected_list",
                "test_cases": "[([], [], []), ([1], [1], [1]), ([3, 9, 20, 15, 7], [9, 3, 15, 20, 7], [3, 9, 20, None, None, 15, 7]), ([-1], [-1], [-1]), ([1, 2], [2, 1], [1, 2]), ([1, 2], [1, 2], [1, None, 2]), ([1, 2, 3], [2, 1, 3], [1, 2, 3]), ([1, 2, 4, 5, 3, 6], [4, 2, 5, 1, 6, 3], [1, 2, 3, 4, 5, 6]), ([1, 2, 3, 4], [1, 2, 3, 4], [1, None, 2, None, 3, None, 4]), ([4, 3, 2, 1], [1, 2, 3, 4], [4, 3, None, 2, None, 1]), ([10, 5, 1, 7, 40, 50], [1, 5, 7, 10, 40, 50], [10, 5, 40, 1, 7, None, 50]), ([1, 3, 2], [1, 2, 3], [1, None, 3, 2]), ([2, 1, 3], [1, 2, 3], [2, 1, 3]), ([5, 3, 2, 1, 4, 6, 7], [1, 2, 3, 4, 5, 6, 7], [5, 3, 6, 2, 4, None, 7, 1]), ([7, 3, 2, 1, 5, 4, 6, 10, 9, 11], [1, 2, 3, 4, 5, 6, 7, 9, 10, 11], [7, 3, 10, 2, 5, 9, 11, 1, None, 4, 6]), ([-3000, -2999, -2998], [-2998, -2999, -3000], [-3000, -2999, None, -2998])]",
                "body": "        result = run_build_tree(Solution, preorder, inorder)\n        assert_build_tree(result, expected_list)"
            }
        ]
    },
    "playground_imports": "from helpers import run_build_tree, assert_build_tree\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\npreorder = [3, 9, 20, 15, 7]\ninorder = [9, 3, 15, 20, 7]\nexpected_list = [3, 9, 20, None, None, 15, 7]",
    "playground_run": "result = run_build_tree(Solution, preorder, inorder)\nresult",
    "playground_assert": "assert_build_tree(result, expected_list)"
}
