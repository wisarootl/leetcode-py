{
    "problem_name": "house_robber",
    "solution_class_name": "Solution",
    "problem_number": "198",
    "problem_title": "House Robber",
    "difficulty": "Medium",
    "topics": "Array, Dynamic Programming",
    "_tags": { "list": ["grind"] },

    "readme_description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.",

    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n```"
            },
            {
                "content": "```\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n```"
            }
        ]
    },

    "readme_constraints": "- `1 <= nums.length <= 100`\n- `0 <= nums[i] <= 400`",

    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "rob",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.rob(nums)",
    "helpers_assert_name": "rob",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",

    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",

    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_rob, run_rob\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "HouseRobber",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",

    "_solution_methods": {
        "list": [
            {
                "name": "rob",
                "signature": "(self, nums: list[int]) -> int",
                "body": "        # TODO: Implement rob\n        return 0"
            }
        ]
    },

    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },

    "_test_methods": {
        "list": [
            {
                "name": "test_rob",
                "signature": "(self, nums: list[int], expected: int)",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 2, 3, 1], 4), ([2, 7, 9, 3, 1], 12), ([1], 1), ([2, 1], 2), ([5, 1, 3, 9], 14), ([2, 7, 9, 3, 1, 5, 8], 20), ([0, 0, 0], 0), ([5], 5), ([1, 2], 2), ([2, 1, 1, 2], 4), ([5, 5, 10, 100, 10, 5], 110), ([100, 1, 1, 100], 200), ([1, 3, 1, 3, 100], 103), ([400, 0, 400], 800), ([1, 2, 3, 4, 5], 9)]",
                "body": "        result = run_rob(Solution, nums)\n        assert_rob(result, expected)"
            }
        ]
    },

    "playground_imports": "from helpers import run_rob, assert_rob\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [2, 7, 9, 3, 1]\nexpected = 12",
    "playground_run": "result = run_rob(Solution, nums)\nresult",
    "playground_assert": "assert_rob(result, expected)"
}
