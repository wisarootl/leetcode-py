{
    "problem_name": "palindromic_substrings",
    "solution_class_name": "Solution",
    "problem_number": "647",
    "problem_title": "Palindromic Substrings",
    "difficulty": "Medium",
    "topics": "Two Pointers, String, Dynamic Programming",
    "_tags": {
        "list": ["blind-75"]
    },
    "readme_description": "Given a string s, return the number of palindromic substrings in it.\n\nA string is a palindrome when it reads the same backward as forward.\n\nA substring is a contiguous sequence of characters within the string.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n```"
            },
            {
                "content": "```\nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n```"
            }
        ]
    },
    "readme_constraints": "1 <= s.length <= 1000\ns consists of lowercase English letters.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "count_substrings",
    "helpers_run_signature": "(solution_class: type, s: str)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.countSubstrings(s)",
    "helpers_assert_name": "count_substrings",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_count_substrings, run_count_substrings\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "PalindromicSubstrings",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "countSubstrings",
                "signature": "(self, s: str) -> int",
                "body": "        # TODO: Implement countSubstrings\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [
            {
                "name": "setup_method",
                "parameters": "",
                "body": "self.solution = Solution()"
            }
        ]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_count_substrings",
                "signature": "(self, s: str, expected: int)",
                "parametrize": "s, expected",
                "test_cases": {
                    "list": [
                        "('abc', 3)",
                        "('aaa', 6)",
                        "('a', 1)",
                        "('aa', 3)",
                        "('aba', 4)",
                        "('abccba', 9)",
                        "('racecar', 10)",
                        "('abcdef', 6)",
                        "('aab', 4)",
                        "('ababa', 9)",
                        "('aaaaa', 15)",
                        "('ab', 2)",
                        "('abcba', 7)",
                        "('abacaba', 12)",
                        "('xyz', 3)"
                    ]
                },
                "body": "        result = run_count_substrings(Solution, s)\n        assert_count_substrings(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_count_substrings, assert_count_substrings\nfrom solution import Solution",
    "playground_setup": "# Example test case\ns = 'abc'\nexpected = 3",
    "playground_run": "result = run_count_substrings(Solution, s)\nresult",
    "playground_assert": "assert_count_substrings(result, expected)",
    "playground_test_case": "s = 'abc'",
    "playground_execution": "result = run_count_substrings(Solution, s)",
    "playground_assertion": "assert_count_substrings(result, 3)"
}
