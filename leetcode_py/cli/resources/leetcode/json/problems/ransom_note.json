{
    "problem_name": "ransom_note",
    "solution_class_name": "Solution",
    "problem_number": "383",
    "problem_title": "Ransom Note",
    "difficulty": "Easy",
    "topics": "Hash Table, String, Counting",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given two strings `ransomNote` and `magazine`, return `true` if `ransomNote` can be constructed by using the letters from `magazine` and `false` otherwise.\n\nEach letter in `magazine` can only be used once in `ransomNote`.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: ransomNote = \"a\", magazine = \"b\"\nOutput: false\n```" },
            { "content": "```\nInput: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false\n```" },
            { "content": "```\nInput: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true\n```" }
        ]
    },
    "readme_constraints": "- 1 <= ransomNote.length, magazine.length <= 10^5\n- ransomNote and magazine consist of lowercase English letters.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "can_construct",
    "helpers_run_signature": "(solution_class: type, ransom_note: str, magazine: str)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.can_construct(ransom_note, magazine)",
    "helpers_assert_name": "can_construct",
    "helpers_assert_signature": "(result: bool, expected: bool) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_can_construct, run_can_construct\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "RansomNote",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "can_construct",
                "signature": "(self, ransom_note: str, magazine: str) -> bool",
                "body": "        # TODO: Implement can_construct\n        return False"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_can_construct",
                "signature": "(self, ransom_note: str, magazine: str, expected: bool)",
                "parametrize": "ransom_note, magazine, expected",
                "test_cases": "[('a', 'b', False), ('aa', 'ab', False), ('aa', 'aab', True), ('aab', 'baa', True), ('', '', True), ('', 'abc', True), ('abc', '', False), ('abc', 'abc', True), ('abc', 'cba', True), ('aaa', 'aa', False), ('ab', 'ba', True)]",
                "body": "        result = run_can_construct(Solution, ransom_note, magazine)\n        assert_can_construct(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_can_construct, assert_can_construct\nfrom solution import Solution",
    "playground_setup": "# Example test case\nransom_note = 'aa'\nmagazine = 'aab'\nexpected = True",
    "playground_run": "result = run_can_construct(Solution, ransom_note, magazine)\nresult",
    "playground_assert": "assert_can_construct(result, expected)"
}
