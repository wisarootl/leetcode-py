{
    "problem_name": "find_the_duplicate_number",
    "solution_class_name": "Solution",
    "problem_number": "287",
    "problem_title": "Find the Duplicate Number",
    "difficulty": "Medium",
    "topics": "Array, Two Pointers, Binary Search, Bit Manipulation",
    "_tags": { "list": ["grind"] },
    "readme_description": "Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\nThere is only **one repeated number** in `nums`, return *this repeated number*.\n\nYou must solve the problem **without** modifying the array `nums` and using only constant extra space.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: nums = [1,3,4,2,2]\nOutput: 2\n```" },
            { "content": "```\nInput: nums = [3,1,3,4,2]\nOutput: 3\n```" },
            { "content": "```\nInput: nums = [3,3,3,3,3]\nOutput: 3\n```" }
        ]
    },
    "readme_constraints": "- `1 <= n <= 10^5`\n- `nums.length == n + 1`\n- `1 <= nums[i] <= n`\n- All the integers in `nums` appear only **once** except for **precisely one integer** which appears **two or more** times.",
    "readme_additional": "**Follow up:**\n\n- How can we prove that at least one duplicate number must exist in `nums`?\n- Can you solve the problem in linear runtime complexity?",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "find_duplicate",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.find_duplicate(nums)",
    "helpers_assert_name": "find_duplicate",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_find_duplicate, run_find_duplicate\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "FindTheDuplicateNumber",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "find_duplicate",
                "signature": "(self, nums: list[int]) -> int",
                "body": "        # TODO: Implement find_duplicate\n        return nums[0]"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_find_duplicate",
                "signature": "(self, nums: list[int], expected: int)",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 3, 4, 2, 2], 2), ([3, 1, 3, 4, 2], 3), ([3, 3, 3, 3, 3], 3), ([1, 1], 1), ([2, 2, 2], 2), ([1, 2, 3, 4, 4], 4), ([4, 3, 2, 1, 2], 2), ([2, 5, 9, 6, 9, 3, 8, 9, 7, 1], 9), ([1, 4, 4, 2, 4], 4), ([3, 1, 3, 4, 2], 3), ([1, 3, 4, 2, 2], 2), ([2, 1, 3, 4, 5, 6, 7, 8, 9, 9], 9), ([5, 2, 1, 3, 5, 7, 6, 4], 5), ([1, 2, 2], 2), ([1, 1, 2], 1), ([2, 1, 1], 1), ([1, 2, 3, 3], 3), ([4, 1, 2, 3, 4], 4)]",
                "body": "        result = run_find_duplicate(Solution, nums)\n        assert_find_duplicate(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_find_duplicate, assert_find_duplicate\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums: list[int] = [1, 3, 4, 2, 2]\nexpected = 2",
    "playground_run": "result = run_find_duplicate(Solution, nums)\nresult",
    "playground_assert": "assert_find_duplicate(result, expected)"
}
