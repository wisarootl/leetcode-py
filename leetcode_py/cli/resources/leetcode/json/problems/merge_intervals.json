{
    "problem_name": "merge_intervals",
    "solution_class_name": "Solution",
    "problem_number": "56",
    "problem_title": "Merge Intervals",
    "difficulty": "Medium",
    "topics": "Array, Sorting",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\n```\n**Explanation:** Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
            },
            {
                "content": "```\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\n```\n**Explanation:** Intervals [1,4] and [4,5] are considered overlapping."
            },
            {
                "content": "```\nInput: intervals = [[4,7],[1,4]]\nOutput: [[1,7]]\n```\n**Explanation:** Intervals [1,4] and [4,7] are considered overlapping."
            }
        ]
    },
    "readme_constraints": "- `1 <= intervals.length <= 10^4`\n- `intervals[i].length == 2`\n- `0 <= starti <= endi <= 10^4`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "merge",
    "helpers_run_signature": "(solution_class: type, intervals: list[list[int]])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.merge(intervals)",
    "helpers_assert_name": "merge",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_merge, run_merge\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MergeIntervals",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "merge",
                "signature": "(self, intervals: list[list[int]]) -> list[list[int]]",
                "body": "        # TODO: Implement merge\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_merge",
                "signature": "(self, intervals: list[list[int]], expected: list[list[int]])",
                "parametrize": "intervals, expected",
                "test_cases": "[([[1,3],[2,6],[8,10],[15,18]], [[1,6],[8,10],[15,18]]), ([[1,4],[4,5]], [[1,5]]), ([[4,7],[1,4]], [[1,7]]), ([[1,3]], [[1,3]]), ([[1,4],[2,3]], [[1,4]]), ([[1,2],[3,4],[5,6]], [[1,2],[3,4],[5,6]]), ([[0,0]], [[0,0]]), ([[1,10],[2,3],[4,5],[6,7],[8,9]], [[1,10]]), ([[1,3],[2,6],[8,10],[9,12],[15,18]], [[1,6],[8,12],[15,18]]), ([[2,3],[4,5],[6,7],[8,9],[1,10]], [[1,10]]), ([[1,4],[0,4]], [[0,4]]), ([[1,4],[0,0],[3,5]], [[0,0],[1,5]])]",
                "body": "        result = run_merge(Solution, intervals)\n        assert_merge(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_merge, assert_merge\nfrom solution import Solution",
    "playground_setup": "# Example test case\nintervals = [[1,3],[2,6],[8,10],[15,18]]\nexpected = [[1,6],[8,10],[15,18]]",
    "playground_run": "result = run_merge(Solution, intervals)\nresult",
    "playground_assert": "assert_merge(result, expected)"
}
