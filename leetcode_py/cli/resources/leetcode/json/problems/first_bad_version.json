{
    "problem_name": "first_bad_version",
    "solution_class_name": "Solution",
    "problem_number": "278",
    "problem_title": "First Bad Version",
    "difficulty": "Easy",
    "topics": "Binary Search, Interactive",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: n = 5, bad = 4\nOutput: 4\n```\n**Explanation:**\n```\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\n```\nThen 4 is the first bad version."
            },
            { "content": "```\nInput: n = 1, bad = 1\nOutput: 1\n```" }
        ]
    },
    "readme_constraints": "- 1 <= bad <= n <= 2^31 - 1",
    "readme_additional": "**Note:** The `isBadVersion` API is already defined for you.",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "first_bad_version",
    "helpers_run_signature": "(solution_class: type, n: int, bad: int)",
    "helpers_run_body": "    solution = solution_class(bad)\n    return solution.first_bad_version(n)",
    "helpers_assert_name": "first_bad_version",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_first_bad_version, run_first_bad_version\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "FirstBadVersion",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "__init__",
                "signature": "(self, first_bad: int = 1) -> None",
                "body": "        self.is_bad_version = lambda version: version >= first_bad"
            },
            {
                "name": "first_bad_version",
                "signature": "(self, n: int) -> int",
                "body": "        # TODO: Implement first_bad_version\n        return 1"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_first_bad_version",
                "signature": "(self, n: int, bad: int, expected: int)",
                "parametrize": "n, bad, expected",
                "test_cases": "[(5, 4, 4), (1, 1, 1), (3, 1, 1), (10, 7, 7), (100, 50, 50), (2, 1, 1), (2, 2, 2), (1000, 1, 1), (1000, 999, 999), (1000, 500, 500), (20, 15, 15), (50, 25, 25), (8, 3, 3), (16, 9, 9), (200, 150, 150)]",
                "body": "        result = run_first_bad_version(Solution, n, bad)\n        assert_first_bad_version(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_first_bad_version, assert_first_bad_version\nfrom solution import Solution",
    "playground_setup": "# Example test case\nn = 5\nbad = 4\nexpected = 4",
    "playground_run": "result = run_first_bad_version(Solution, n, bad)\nresult",
    "playground_assert": "assert_first_bad_version(result, expected)"
}
