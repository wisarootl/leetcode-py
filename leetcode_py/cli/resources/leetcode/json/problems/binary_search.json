{
    "problem_name": "binary_search",
    "solution_class_name": "Solution",
    "problem_number": "704",
    "problem_title": "Binary Search",
    "difficulty": "Easy",
    "topics": "Array, Binary Search",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\n```\n**Explanation:** 9 exists in nums and its index is 4"
            },
            {
                "content": "```\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\n```\n**Explanation:** 2 does not exist in nums so return -1"
            }
        ]
    },
    "readme_constraints": "- `1 <= nums.length <= 10^4`\n- `-10^4 < nums[i], target < 10^4`\n- All the integers in `nums` are **unique**.\n- `nums` is sorted in ascending order.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "search",
    "helpers_run_signature": "(solution_class: type, nums: list[int], target: int)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.search(nums, target)",
    "helpers_assert_name": "search",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_search, run_search\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "BinarySearch",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "search",
                "signature": "(self, nums: list[int], target: int) -> int",
                "body": "        # TODO: Implement search\n        return -1"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_search",
                "signature": "(self, nums: list[int], target: int, expected: int)",
                "parametrize": "nums, target, expected",
                "test_cases": "[([-1, 0, 3, 5, 9, 12], 9, 4), ([-1, 0, 3, 5, 9, 12], 2, -1), ([5], 5, 0), ([5], -5, -1), ([1, 3, 5, 7, 9], 1, 0), ([1, 3, 5, 7, 9], 9, 4), ([1, 3, 5, 7, 9], 4, -1), ([1, 3], 1, 0), ([1, 3], 3, 1), ([1, 3], 2, -1), ([-5, -2, 0, 3, 7], -2, 1), ([-5, -2, 0, 3, 7], 0, 2), ([-5, -2, 0, 3, 7], -1, -1)]",
                "body": "        result = run_search(Solution, nums, target)\n        assert_search(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_search, assert_search\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [-1, 0, 3, 5, 9, 12]\ntarget = 9\nexpected = 4",
    "playground_run": "result = run_search(Solution, nums, target)\nresult",
    "playground_assert": "assert_search(result, expected)"
}
