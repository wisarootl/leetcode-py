{
    "problem_name": "permutations",
    "solution_class_name": "Solution",
    "problem_number": "46",
    "problem_title": "Permutations",
    "difficulty": "Medium",
    "topics": "Array, Backtracking",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n```"
            },
            { "content": "```\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n```" },
            { "content": "```\nInput: nums = [1]\nOutput: [[1]]\n```" }
        ]
    },
    "readme_constraints": "- 1 <= nums.length <= 6\n- -10 <= nums[i] <= 10\n- All the integers of nums are unique.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "permute",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.permute(nums)",
    "helpers_assert_name": "permute",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    # Sort both result and expected for comparison since order doesn't matter\n    result_sorted = [sorted(perm) for perm in result]\n    expected_sorted = [sorted(perm) for perm in expected]\n    result_sorted.sort()\n    expected_sorted.sort()\n    assert len(result) == len(expected)\n    assert result_sorted == expected_sorted\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_permute, run_permute\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "Permutations",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "permute",
                "signature": "(self, nums: list[int]) -> list[list[int]]",
                "body": "        # TODO: Implement permute\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_permute",
                "signature": "(self, nums: list[int], expected: list[list[int]])",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 2, 3], [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]), ([0, 1], [[0, 1], [1, 0]]), ([1], [[1]]), ([2, 1], [[2, 1], [1, 2]]), ([0], [[0]]), ([-1, 0], [[-1, 0], [0, -1]]), ([1, 2], [[1, 2], [2, 1]]), ([3, 2, 1], [[3, 2, 1], [3, 1, 2], [2, 3, 1], [2, 1, 3], [1, 3, 2], [1, 2, 3]]), ([-1, 1], [[-1, 1], [1, -1]]), ([5, 4, 3, 2], [[5, 4, 3, 2], [5, 4, 2, 3], [5, 3, 4, 2], [5, 3, 2, 4], [5, 2, 4, 3], [5, 2, 3, 4], [4, 5, 3, 2], [4, 5, 2, 3], [4, 3, 5, 2], [4, 3, 2, 5], [4, 2, 5, 3], [4, 2, 3, 5], [3, 5, 4, 2], [3, 5, 2, 4], [3, 4, 5, 2], [3, 4, 2, 5], [3, 2, 5, 4], [3, 2, 4, 5], [2, 5, 4, 3], [2, 5, 3, 4], [2, 4, 5, 3], [2, 4, 3, 5], [2, 3, 5, 4], [2, 3, 4, 5]]), ([0, -1, 1], [[0, -1, 1], [0, 1, -1], [-1, 0, 1], [-1, 1, 0], [1, 0, -1], [1, -1, 0]]), ([10, -10], [[10, -10], [-10, 10]])]",
                "body": "        result = run_permute(Solution, nums)\n        assert_permute(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_permute, assert_permute\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [1, 2, 3]\nexpected = [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
    "playground_run": "result = run_permute(Solution, nums)\nresult",
    "playground_assert": "assert_permute(result, expected)"
}
