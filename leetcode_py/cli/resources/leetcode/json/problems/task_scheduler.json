{
    "problem_name": "task_scheduler",
    "solution_class_name": "Solution",
    "problem_number": "621",
    "problem_title": "Task Scheduler",
    "difficulty": "Medium",
    "topics": "Array, Hash Table, Greedy, Sorting, Heap (Priority Queue), Counting",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given an array of CPU `tasks`, each labeled with a letter from A to Z, and a number `n`. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there's a constraint: there has to be a gap of **at least** `n` intervals between two tasks with the same label.\n\nReturn the **minimum** number of CPU intervals required to complete all tasks.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\n```\n**Explanation:** A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B.\n\nAfter completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed."
            },
            {
                "content": "```\nInput: tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1\nOutput: 6\n```\n**Explanation:** A possible sequence is: A -> B -> C -> D -> A -> B.\n\nWith a cooling interval of 1, you can repeat a task after just one other task."
            },
            {
                "content": "```\nInput: tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3\nOutput: 10\n```\n**Explanation:** A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B.\n\nThere are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks."
            }
        ]
    },
    "readme_constraints": "- `1 <= tasks.length <= 10^4`\n- `tasks[i]` is an uppercase English letter.\n- `0 <= n <= 100`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "least_interval",
    "helpers_run_signature": "(solution_class: type, tasks: list[str], n: int)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.least_interval(tasks, n)",
    "helpers_assert_name": "least_interval",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_least_interval, run_least_interval\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "TaskScheduler",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "least_interval",
                "signature": "(self, tasks: list[str], n: int) -> int",
                "body": "        # TODO: Implement least_interval\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_least_interval",
                "signature": "(self, tasks: list[str], n: int, expected: int)",
                "parametrize": "tasks, n, expected",
                "test_cases": "[(['A', 'A', 'A', 'B', 'B', 'B'], 2, 8), (['A', 'C', 'A', 'B', 'D', 'B'], 1, 6), (['A', 'A', 'A', 'B', 'B', 'B'], 3, 10), (['A'], 0, 1), (['A', 'A'], 1, 3), (['A', 'B'], 0, 2), (['A', 'A', 'A'], 0, 3), (['A', 'B', 'C', 'D', 'E', 'F'], 2, 6), (['A', 'A', 'A', 'A', 'A', 'A', 'B', 'C', 'D', 'E', 'F', 'G'], 2, 16), (['A', 'A', 'B', 'B'], 2, 5), (['A', 'B', 'A', 'B'], 1, 4), (['A', 'A', 'A', 'A'], 3, 13)]",
                "body": "        result = run_least_interval(Solution, tasks, n)\n        assert_least_interval(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_least_interval, assert_least_interval\nfrom solution import Solution",
    "playground_setup": "# Example test case\ntasks = ['A', 'A', 'A', 'B', 'B', 'B']\nn = 2\nexpected = 8",
    "playground_run": "result = run_least_interval(Solution, tasks, n)\nresult",
    "playground_assert": "assert_least_interval(result, expected)"
}
