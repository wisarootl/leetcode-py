{
    "problem_name": "merge_two_sorted_lists",
    "solution_class_name": "Solution",
    "problem_number": "21",
    "problem_title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "topics": "Linked List, Recursion",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn *the head of the merged linked list*.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n```"
            },
            { "content": "```\nInput: list1 = [], list2 = []\nOutput: []\n```" },
            { "content": "```\nInput: list1 = [], list2 = [0]\nOutput: [0]\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in both lists is in the range `[0, 50]`.\n- `-100 <= Node.val <= 100`\n- Both `list1` and `list2` are sorted in **non-decreasing** order.",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import ListNode",
    "helpers_content": "",
    "helpers_run_name": "merge_two_lists",
    "helpers_run_signature": "(solution_class: type, list1_vals: list[int], list2_vals: list[int])",
    "helpers_run_body": "    list1 = ListNode[int].from_list(list1_vals)\n    list2 = ListNode[int].from_list(list2_vals)\n    implementation = solution_class()\n    return implementation.merge_two_lists(list1, list2)",
    "helpers_assert_name": "merge_two_lists",
    "helpers_assert_signature": "(result: ListNode[int] | None, expected_vals: list[int]) -> bool",
    "helpers_assert_body": "    expected = ListNode[int].from_list(expected_vals)\n    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_merge_two_lists, run_merge_two_lists\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MergeTwoSortedLists",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "merge_two_lists",
                "signature": "(self, list1: ListNode[int] | None, list2: ListNode[int] | None) -> ListNode[int] | None",
                "body": "        # TODO: Implement merge_two_lists\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_merge_two_lists",
                "signature": "(self, list1_vals: list[int], list2_vals: list[int], expected_vals: list[int])",
                "parametrize": "list1_vals, list2_vals, expected_vals",
                "test_cases": "[([1, 2, 4], [1, 3, 4], [1, 1, 2, 3, 4, 4]), ([], [], []), ([], [0], [0]), ([1], [2], [1, 2]), ([2], [1], [1, 2]), ([1, 3, 5], [2, 4, 6], [1, 2, 3, 4, 5, 6]), ([1, 1, 1], [2, 2, 2], [1, 1, 1, 2, 2, 2]), ([0], [], [0]), ([1, 2, 3], [], [1, 2, 3]), ([5], [1, 2, 3, 4], [1, 2, 3, 4, 5]), ([-1, 0, 1], [-2, 2, 3], [-2, -1, 0, 1, 2, 3]), ([1, 5, 9], [2, 6, 8], [1, 2, 5, 6, 8, 9]), ([10, 20, 30], [15, 25, 35], [10, 15, 20, 25, 30, 35]), ([1, 1], [1, 1], [1, 1, 1, 1])]",
                "body": "        result = run_merge_two_lists(Solution, list1_vals, list2_vals)\n        assert_merge_two_lists(result, expected_vals)"
            }
        ]
    },
    "playground_imports": "from helpers import run_merge_two_lists, assert_merge_two_lists\nfrom solution import Solution\nfrom leetcode_py import ListNode",
    "playground_setup": "# Example test case\nlist1_vals = [1, 2, 4]\nlist2_vals = [1, 3, 4]\nexpected_vals = [1, 1, 2, 3, 4, 4]",
    "playground_run": "result = run_merge_two_lists(Solution, list1_vals, list2_vals)\nListNode[int].to_list(result) if result else []",
    "playground_assert": "assert_merge_two_lists(result, expected_vals)"
}
