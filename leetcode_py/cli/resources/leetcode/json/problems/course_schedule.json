{
    "problem_name": "course_schedule",
    "solution_class_name": "Solution",
    "problem_number": "207",
    "problem_title": "Course Schedule",
    "difficulty": "Medium",
    "topics": "Depth-First Search, Breadth-First Search, Graph, Topological Sort",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`.\n\n- For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\n```\n**Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible."
            },
            {
                "content": "```\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\n```\n**Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
            }
        ]
    },
    "readme_constraints": "- `1 <= numCourses <= 2000`\n- `0 <= prerequisites.length <= 5000`\n- `prerequisites[i].length == 2`\n- `0 <= ai, bi < numCourses`\n- All the pairs prerequisites[i] are **unique**.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "can_finish",
    "helpers_run_signature": "(solution_class: type, num_courses: int, prerequisites: list[list[int]])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.can_finish(num_courses, prerequisites)",
    "helpers_assert_name": "can_finish",
    "helpers_assert_signature": "(result: bool, expected: bool) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_can_finish, run_can_finish\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "CourseSchedule",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "can_finish",
                "signature": "(self, num_courses: int, prerequisites: list[list[int]]) -> bool",
                "body": "        # TODO: Implement can_finish\n        return False"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_can_finish",
                "signature": "(self, num_courses: int, prerequisites: list[list[int]], expected: bool)",
                "parametrize": "num_courses, prerequisites, expected",
                "test_cases": "[(2, [[1, 0]], True), (2, [[1, 0], [0, 1]], False), (1, [], True), (3, [[1, 0], [2, 1]], True), (4, [[1, 0], [2, 1], [3, 2], [1, 3]], False), (3, [[0, 1], [0, 2], [1, 2]], True), (4, [[0, 1], [1, 2], [2, 3], [3, 1]], False), (6, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], True), (3, [[1, 0], [2, 0]], True), (5, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]], False), (4, [[1, 0], [2, 0], [3, 1], [3, 2]], True), (5, [[1, 0], [2, 1], [3, 2], [4, 3], [0, 4]], False)]",
                "body": "        result = run_can_finish(Solution, num_courses, prerequisites)\n        assert_can_finish(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_can_finish, assert_can_finish\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnum_courses = 2\nprerequisites = [[1, 0]]\nexpected = True",
    "playground_run": "result = run_can_finish(Solution, num_courses, prerequisites)\nresult",
    "playground_assert": "assert_can_finish(result, expected)"
}
