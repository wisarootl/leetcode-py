{
    "problem_name": "k_closest_points_to_origin",
    "solution_class_name": "Solution",
    "problem_number": "973",
    "problem_title": "K Closest Points to Origin",
    "difficulty": "Medium",
    "topics": "Array, Math, Divide and Conquer, Geometry, Sorting, Heap (Priority Queue), Quickselect",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `\u221a(x1 - x2)\u00b2 + (y1 - y2)\u00b2`).\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg)\n\n```\nInput: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\n```\n**Explanation:** The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."
            },
            {
                "content": "```\nInput: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\n```\n**Explanation:** The answer [[-2,4],[3,3]] would also be accepted."
            }
        ]
    },
    "readme_constraints": "- `1 <= k <= points.length <= 10^4`\n- `-10^4 <= xi, yi <= 10^4`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "k_closest",
    "helpers_run_signature": "(solution_class: type, points: list[list[int]], k: int)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.k_closest(points, k)",
    "helpers_assert_name": "k_closest",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    # Sort both result and expected for comparison since order doesn't matter\n    result_sorted = sorted(result)\n    expected_sorted = sorted(expected)\n    assert result_sorted == expected_sorted\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_k_closest, run_k_closest\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "KClosestPointsToOrigin",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "k_closest",
                "signature": "(self, points: list[list[int]], k: int) -> list[list[int]]",
                "body": "        # TODO: Implement k_closest\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_k_closest",
                "signature": "(self, points: list[list[int]], k: int, expected: list[list[int]])",
                "parametrize": "points, k, expected",
                "test_cases": "[([[1, 3], [-2, 2]], 1, [[-2, 2]]), ([[3, 3], [5, -1], [-2, 4]], 2, [[3, 3], [-2, 4]]), ([[0, 1], [1, 0]], 2, [[0, 1], [1, 0]]), ([[1, 1], [1, 1], [1, 1]], 2, [[1, 1], [1, 1]]), ([[0, 0]], 1, [[0, 0]]), ([[1, 0], [2, 0], [3, 0]], 2, [[1, 0], [2, 0]]), ([[0, 3], [4, 0]], 1, [[0, 3]]), ([[-5, 4], [4, 6], [2, -1]], 1, [[2, -1]]), ([[1, 1], [2, 2], [3, 3]], 1, [[1, 1]]), ([[10, 10], [1, 1], [5, 5]], 2, [[1, 1], [5, 5]]), ([[-1, -1], [1, 1], [-1, 1], [1, -1]], 3, [[-1, 1], [1, -1], [1, 1]]), ([[6, 10], [-3, 3], [-2, 5], [0, 2]], 3, [[-3, 3], [0, 2], [-2, 5]])]",
                "body": "        result = run_k_closest(Solution, points, k)\n        assert_k_closest(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_k_closest, assert_k_closest\nfrom solution import Solution",
    "playground_setup": "# Example test case\npoints = [[1, 3], [-2, 2]]\nk = 1\nexpected = [[-2, 2]]",
    "playground_run": "result = run_k_closest(Solution, points, k)\nresult",
    "playground_assert": "assert_k_closest(result, expected)"
}
