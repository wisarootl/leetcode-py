{
    "problem_name": "lowest_common_ancestor_of_a_binary_search_tree",
    "solution_class_name": "Solution",
    "problem_number": "235",
    "problem_title": "Lowest Common Ancestor of a Binary Search Tree",
    "difficulty": "Medium",
    "topics": "Tree, Depth-First Search, Binary Search Tree, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\nAccording to the definition of LCA on Wikipedia: \"The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\"",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)\n\n```\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\n```\n**Explanation:** The LCA of nodes 2 and 8 is 6."
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)\n\n```\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\n```\n**Explanation:** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."
            },
            { "content": "```\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is in the range `[2, 10^5]`.\n- `-10^9 <= Node.val <= 10^9`\n- All `Node.val` are **unique**.\n- `p != q`\n- `p` and `q` will exist in the BST.",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "lowest_common_ancestor",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None], p_val: int, q_val: int)",
    "helpers_run_body": "    root = TreeNode[int].from_list(root_list)\n    assert root is not None\n    p = root.find_node(p_val)\n    q = root.find_node(q_val)\n    assert p is not None and q is not None\n    implementation = solution_class()\n    return implementation.lowest_common_ancestor(root, p, q)",
    "helpers_assert_name": "lowest_common_ancestor",
    "helpers_assert_signature": "(result: TreeNode[int] | None, expected_val: int) -> bool",
    "helpers_assert_body": "    assert result is not None\n    assert result.val == expected_val\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_lowest_common_ancestor, run_lowest_common_ancestor\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "LowestCommonAncestorOfABinarySearchTree",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "lowest_common_ancestor",
                "signature": "(self, root: TreeNode[int] | None, p: TreeNode[int], q: TreeNode[int]) -> TreeNode[int] | None",
                "body": "        # TODO: Implement lowest_common_ancestor\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_lowest_common_ancestor",
                "signature": "(self, root_list: list[int | None], p_val: int, q_val: int, expected_val: int)",
                "parametrize": "root_list, p_val, q_val, expected_val",
                "test_cases": "[([6, 2, 8, 0, 4, 7, 9, None, None, 3, 5], 2, 8, 6), ([6, 2, 8, 0, 4, 7, 9, None, None, 3, 5], 2, 4, 2), ([2, 1], 2, 1, 2), ([2, 1], 1, 2, 2), ([6, 2, 8, 0, 4, 7, 9], 0, 4, 2), ([6, 2, 8, 0, 4, 7, 9], 7, 9, 8), ([5, 3, 6, 2, 4, None, None, 1], 1, 4, 3), ([10, 5, 15, 3, 7, 12, 20], 3, 7, 5), ([1, None, 2], 1, 2, 1), ([3, 1, 4, None, 2], 1, 2, 1), ([20, 8, 22, 4, 12, None, None, None, None, 10, 14], 10, 14, 12), ([50, 30, 70, 20, 40, 60, 80], 20, 40, 30)]",
                "body": "        result = run_lowest_common_ancestor(Solution, root_list, p_val, q_val)\n        assert_lowest_common_ancestor(result, expected_val)"
            }
        ]
    },
    "playground_imports": "from helpers import run_lowest_common_ancestor, assert_lowest_common_ancestor\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list = [6, 2, 8, 0, 4, 7, 9, None, None, 3, 5]\np_val = 2\nq_val = 8\nexpected_val = 6",
    "playground_run": "result = run_lowest_common_ancestor(Solution, root_list, p_val, q_val)\nresult.val if result else None",
    "playground_assert": "assert_lowest_common_ancestor(result, expected_val)"
}
