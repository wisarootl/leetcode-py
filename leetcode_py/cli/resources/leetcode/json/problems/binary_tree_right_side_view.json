{
    "problem_name": "binary_tree_right_side_view",
    "solution_class_name": "Solution",
    "problem_number": "199",
    "problem_title": "Binary Tree Right Side View",
    "difficulty": "Medium",
    "topics": "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return *the values of the nodes you can see ordered from top to bottom*.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png)\n\n```\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n```"
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png)\n\n```\nInput: root = [1,2,3,4,null,null,null,5]\nOutput: [1,3,4,5]\n```"
            },
            { "content": "```\nInput: root = [1,null,3]\nOutput: [1,3]\n```" },
            { "content": "```\nInput: root = []\nOutput: []\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is in the range `[0, 100]`.\n- `-100 <= Node.val <= 100`",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "right_side_view",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None])",
    "helpers_run_body": "    implementation = solution_class()\n    root = TreeNode.from_list(root_list) if root_list else None\n    return implementation.right_side_view(root)",
    "helpers_assert_name": "right_side_view",
    "helpers_assert_signature": "(result: list[int], expected: list[int]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_right_side_view, run_right_side_view\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "BinaryTreeRightSideView",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "right_side_view",
                "signature": "(self, root: TreeNode[int] | None) -> list[int]",
                "body": "        # TODO: Implement right_side_view\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_right_side_view",
                "signature": "(self, root_list: list[int | None], expected: list[int])",
                "parametrize": "root_list, expected",
                "test_cases": "[([1, 2, 3, None, 5, None, 4], [1, 3, 4]), ([1, 2, 3, 4, None, None, None, 5], [1, 3, 4, 5]), ([1, None, 3], [1, 3]), ([], []), ([1], [1]), ([1, 2], [1, 2]), ([1, None, 2], [1, 2]), ([1, 2, 3], [1, 3]), ([1, 2, None, 4], [1, 2, 4]), ([1, 2, 3, 4, 5, 6, 7], [1, 3, 7]), ([1, 2, 3, None, None, 4, 5], [1, 3, 5]), ([5, 4, 6, None, None, None, 7], [5, 6, 7]), ([1, 2, 3, 4, 5, None, None, 8], [1, 3, 5, 8]), ([10, 5, 15, None, 6, 12, 20], [10, 15, 20])]",
                "body": "        result = run_right_side_view(Solution, root_list)\n        assert_right_side_view(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_right_side_view, assert_right_side_view\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list: list[int | None] = [1, 2, 3, None, 5, None, 4]\nexpected = [1, 3, 4]",
    "playground_run": "result = run_right_side_view(Solution, root_list)\nresult",
    "playground_assert": "assert_right_side_view(result, expected)"
}
