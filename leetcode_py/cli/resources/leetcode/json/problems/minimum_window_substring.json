{
    "problem_name": "minimum_window_substring",
    "solution_class_name": "Solution",
    "problem_number": "76",
    "problem_title": "Minimum Window Substring",
    "difficulty": "Hard",
    "topics": "Hash Table, String, Sliding Window",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return the **minimum window substring** of `s` such that every character in `t` (including duplicates) is included in the window. If there is no such substring, return the empty string `\"\"`.\n\nThe testcases will be generated such that the answer is unique.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\n```\n**Explanation:** The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."
            },
            {
                "content": "```\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\n```\n**Explanation:** The entire string s is the minimum window."
            },
            {
                "content": "```\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\n```\n**Explanation:** Both 'a's from t must be included in the window. Since the largest window of s only has one 'a', return empty string."
            }
        ]
    },
    "readme_constraints": "- `m == s.length`\n- `n == t.length`\n- `1 <= m, n <= 10^5`\n- `s` and `t` consist of uppercase and lowercase English letters.",
    "readme_additional": "**Follow up:** Could you find an algorithm that runs in `O(m + n)` time?",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "min_window",
    "helpers_run_signature": "(solution_class: type, s: str, t: str)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.min_window(s, t)",
    "helpers_assert_name": "min_window",
    "helpers_assert_signature": "(result: str, expected: str) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_min_window, run_min_window\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "MinimumWindowSubstring",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "min_window",
                "signature": "(self, s: str, t: str) -> str",
                "body": "        # TODO: Implement min_window\n        return \"\""
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_min_window",
                "signature": "(self, s: str, t: str, expected: str)",
                "parametrize": "s, t, expected",
                "test_cases": "[(\"ADOBECODEBANC\", \"ABC\", \"BANC\"), (\"a\", \"a\", \"a\"), (\"a\", \"aa\", \"\"), (\"ab\", \"b\", \"b\"), (\"abc\", \"cba\", \"abc\"), (\"aa\", \"aa\", \"aa\"), (\"a\", \"b\", \"\"), (\"ab\", \"a\", \"a\"), (\"bba\", \"ab\", \"ba\"), (\"acbbaca\", \"aba\", \"baca\"), (\"cabwefgewcwaefgcf\", \"cae\", \"cwae\")]",
                "body": "        result = run_min_window(Solution, s, t)\n        assert_min_window(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_min_window, assert_min_window\nfrom solution import Solution",
    "playground_setup": "# Example test case\ns = 'ADOBECODEBANC'\nt = 'ABC'\nexpected = 'BANC'",
    "playground_run": "result = run_min_window(Solution, s, t)\nresult",
    "playground_assert": "assert_min_window(result, expected)"
}
