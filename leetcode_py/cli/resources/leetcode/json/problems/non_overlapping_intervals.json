{
    "problem_name": "non_overlapping_intervals",
    "solution_class_name": "Solution",
    "problem_number": "435",
    "problem_title": "Non-overlapping Intervals",
    "difficulty": "Medium",
    "topics": "Array, Dynamic Programming, Greedy, Sorting",
    "_tags": {
        "list": ["blind-75"]
    },
    "readme_description": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\n\nNote that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n```"
            },
            {
                "content": "```\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n```"
            },
            {
                "content": "```\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\n```"
            }
        ]
    },
    "readme_constraints": "1 <= intervals.length <= 10^5\nintervals[i].length == 2\n-5 * 10^4 <= starti < endi <= 5 * 10^4",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "erase_overlap_intervals",
    "helpers_run_signature": "(solution_class: type, intervals: list[list[int]])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.eraseOverlapIntervals(intervals)",
    "helpers_assert_name": "erase_overlap_intervals",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_erase_overlap_intervals, run_erase_overlap_intervals\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "NonOverlappingIntervals",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "eraseOverlapIntervals",
                "signature": "(self, intervals: list[list[int]]) -> int",
                "body": "        # TODO: Implement eraseOverlapIntervals\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [
            {
                "name": "setup_method",
                "parameters": "",
                "body": "self.solution = Solution()"
            }
        ]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_erase_overlap_intervals",
                "signature": "(self, intervals: list[list[int]], expected: int)",
                "parametrize": "intervals, expected",
                "test_cases": {
                    "list": [
                        "([[1,2],[2,3],[3,4],[1,3]], 1)",
                        "([[1,2],[1,2],[1,2]], 2)",
                        "([[1,2],[2,3]], 0)",
                        "([[1,2]], 0)",
                        "([[1,2],[1,3],[2,3],[3,4]], 1)",
                        "([[1,2],[2,3],[3,4],[1,3],[2,4]], 2)",
                        "([[1,2],[3,4],[5,6]], 0)",
                        "([[1,2],[1,3],[1,4]], 2)",
                        "([[1,2],[2,3],[3,4],[4,5]], 0)",
                        "([[1,2],[1,2],[1,2],[1,2]], 3)",
                        "([[1,3],[2,4],[3,5],[4,6]], 2)",
                        "([[1,2],[3,4],[5,6],[7,8]], 0)",
                        "([[1,4],[2,3],[3,4]], 1)",
                        "([[1,2],[1,2],[1,2],[2,3]], 2)",
                        "([[1,2],[2,3],[1,3],[3,4]], 1)"
                    ]
                },
                "body": "        result = run_erase_overlap_intervals(Solution, intervals)\n        assert_erase_overlap_intervals(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_erase_overlap_intervals, assert_erase_overlap_intervals\nfrom solution import Solution",
    "playground_setup": "# Example test case\nintervals = [[1,2],[2,3],[3,4],[1,3]]\nexpected = 1",
    "playground_run": "result = run_erase_overlap_intervals(Solution, intervals)\nresult",
    "playground_assert": "assert_erase_overlap_intervals(result, expected)",
    "playground_test_case": "intervals = [[1,2],[2,3],[3,4],[1,3]]",
    "playground_execution": "result = run_erase_overlap_intervals(Solution, intervals)",
    "playground_assertion": "assert_erase_overlap_intervals(result, 1)"
}
