{
    "problem_name": "kth_smallest_element_in_a_bst",
    "solution_class_name": "Solution",
    "problem_number": "230",
    "problem_title": "Kth Smallest Element in a BST",
    "difficulty": "Medium",
    "topics": "Tree, Depth-First Search, Binary Search Tree, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given the `root` of a binary search tree, and an integer `k`, return the `k`th smallest value (1-indexed) of all the values of the nodes in the tree.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg)\n\n```\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n```"
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg)\n\n```\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n```"
            }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is `n`.\n- `1 <= k <= n <= 10^4`\n- `0 <= Node.val <= 10^4`",
    "readme_additional": "**Follow up:** If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "kth_smallest",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None], k: int)",
    "helpers_run_body": "    root = TreeNode[int].from_list(root_list)\n    implementation = solution_class()\n    return implementation.kth_smallest(root, k)",
    "helpers_assert_name": "kth_smallest",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_kth_smallest, run_kth_smallest\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "KthSmallestElementInABst",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "kth_smallest",
                "signature": "(self, root: TreeNode[int] | None, k: int) -> int",
                "body": "        # TODO: Implement kth_smallest\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_kth_smallest",
                "signature": "(self, root_list: list[int | None], k: int, expected: int)",
                "parametrize": "root_list, k, expected",
                "test_cases": "[([3, 1, 4, None, 2], 1, 1), ([5, 3, 6, 2, 4, None, None, 1], 3, 3), ([1], 1, 1), ([2, 1, 3], 2, 2), ([4, 2, 6, 1, 3, 5, 7], 4, 4), ([1, None, 2], 2, 2), ([5, 3, 6, 2, 4, None, None, 1], 1, 1), ([5, 3, 6, 2, 4, None, None, 1], 4, 4), ([10, 5, 15, 3, 7, 12, 20], 1, 3), ([10, 5, 15, 3, 7, 12, 20], 7, 20), ([1, None, 2, None, 3], 3, 3), ([3, 1, 4, None, 2], 4, 4)]",
                "body": "        result = run_kth_smallest(Solution, root_list, k)\n        assert_kth_smallest(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_kth_smallest, assert_kth_smallest\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list = [3, 1, 4, None, 2]\nk = 1\nexpected = 1",
    "playground_run": "result = run_kth_smallest(Solution, root_list, k)\nresult",
    "playground_assert": "assert_kth_smallest(result, expected)"
}
