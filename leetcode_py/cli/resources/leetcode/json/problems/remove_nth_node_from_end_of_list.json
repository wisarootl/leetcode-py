{
    "problem_name": "remove_nth_node_from_end_of_list",
    "solution_class_name": "Solution",
    "problem_number": "19",
    "problem_title": "Remove Nth Node From End of List",
    "difficulty": "Medium",
    "topics": "Linked List, Two Pointers",
    "_tags": { "list": ["grind"] },
    "readme_description": "Given the `head` of a linked list, remove the `n<sup>th</sup>` node from the end of the list and return its head.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)\n\n```\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n```"
            },
            { "content": "```\nInput: head = [1], n = 1\nOutput: []\n```" },
            { "content": "```\nInput: head = [1,2], n = 1\nOutput: [1]\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the list is `sz`.\n- `1 <= sz <= 30`\n- `0 <= Node.val <= 100`\n- `1 <= n <= sz`",
    "readme_additional": "**Follow up:** Could you do this in one pass?",
    "helpers_imports": "from leetcode_py import ListNode",
    "helpers_content": "",
    "helpers_run_name": "remove_nth_from_end",
    "helpers_run_signature": "(solution_class: type, head_list: list[int], n: int)",
    "helpers_run_body": "    head = ListNode[int].from_list(head_list)\n    implementation = solution_class()\n    result = implementation.remove_nth_from_end(head, n)\n    return result.to_list() if result else []",
    "helpers_assert_name": "remove_nth_from_end",
    "helpers_assert_signature": "(result: list[int], expected: list[int]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_remove_nth_from_end, run_remove_nth_from_end\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "RemoveNthNodeFromEndOfList",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "remove_nth_from_end",
                "signature": "(self, head: ListNode[int] | None, n: int) -> ListNode[int] | None",
                "body": "        # TODO: Implement remove_nth_from_end\n        return head"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_remove_nth_from_end",
                "signature": "(self, head_list: list[int], n: int, expected: list[int])",
                "parametrize": "head_list, n, expected",
                "test_cases": "[([1, 2, 3, 4, 5], 2, [1, 2, 3, 5]), ([1], 1, []), ([1, 2], 1, [1]), ([1, 2], 2, [2]), ([1, 2, 3], 3, [2, 3]), ([1, 2, 3], 1, [1, 2]), ([1, 2, 3, 4], 2, [1, 2, 4]), ([1, 2, 3, 4], 4, [2, 3, 4]), ([5], 1, []), ([10, 20], 1, [10]), ([10, 20], 2, [20]), ([1, 2, 3, 4, 5, 6], 3, [1, 2, 3, 5, 6]), ([7, 8, 9, 10], 1, [7, 8, 9]), ([100], 1, []), ([1, 2, 3, 4, 5, 6, 7], 4, [1, 2, 3, 5, 6, 7]), ([0, 1, 2], 2, [0, 2]), ([50, 60, 70, 80, 90], 5, [60, 70, 80, 90]), ([25, 35], 1, [25])]",
                "body": "        result = run_remove_nth_from_end(Solution, head_list, n)\n        assert_remove_nth_from_end(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_remove_nth_from_end, assert_remove_nth_from_end\nfrom solution import Solution\nfrom leetcode_py import ListNode",
    "playground_setup": "# Example test case\nhead_list: list[int] = [1, 2, 3, 4, 5]\nn = 2\nexpected: list[int] = [1, 2, 3, 5]",
    "playground_run": "result = run_remove_nth_from_end(Solution, head_list, n)\nresult",
    "playground_assert": "assert_remove_nth_from_end(result, expected)"
}
