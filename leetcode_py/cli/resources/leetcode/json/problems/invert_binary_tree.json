{
    "problem_name": "invert_binary_tree",
    "solution_class_name": "Solution",
    "problem_number": "226",
    "problem_title": "Invert Binary Tree",
    "difficulty": "Easy",
    "topics": "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given the `root` of a binary tree, invert the tree, and return its root.",
    "_readme_examples": {
        "list": [
            { "content": "```\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n```" },
            { "content": "```\nInput: root = [2,1,3]\nOutput: [2,3,1]\n```" },
            { "content": "```\nInput: root = []\nOutput: []\n```" }
        ]
    },
    "readme_constraints": "- The number of nodes in the tree is in the range [0, 100]\n- -100 <= Node.val <= 100",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import TreeNode",
    "helpers_content": "",
    "helpers_run_name": "invert_tree",
    "helpers_run_signature": "(solution_class: type, root_list: list[int | None])",
    "helpers_run_body": "    root = TreeNode[int].from_list(root_list)\n    implementation = solution_class()\n    return implementation.invert_tree(root)",
    "helpers_assert_name": "invert_tree",
    "helpers_assert_signature": "(result: TreeNode[int] | None, expected_list: list[int | None]) -> bool",
    "helpers_assert_body": "    expected = TreeNode[int].from_list(expected_list)\n    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_invert_tree, run_invert_tree\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "InvertBinaryTree",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "invert_tree",
                "signature": "(self, root: TreeNode[int] | None) -> TreeNode[int] | None",
                "body": "        # TODO: Implement invert_tree\n        return None"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_invert_tree",
                "signature": "(self, root_list: list[int | None], expected_list: list[int | None])",
                "parametrize": "root_list, expected_list",
                "test_cases": "[([4, 2, 7, 1, 3, 6, 9], [4, 7, 2, 9, 6, 3, 1]), ([2, 1, 3], [2, 3, 1]), ([], []), ([1], [1]), ([1, 2], [1, None, 2]), ([1, None, 2], [1, 2]), ([1, 2, 3, 4, 5], [1, 3, 2, None, None, 5, 4]), ([1, 2, 3, None, None, 4, 5], [1, 3, 2, 5, 4]), ([1, 2, 3, 4, 5, 6, 7], [1, 3, 2, 7, 6, 5, 4]), ([5, 3, 8, 2, 4, 7, 9], [5, 8, 3, 9, 7, 4, 2]), ([10, 5, 15, None, 6, 12, 20], [10, 15, 5, 20, 12, 6]), ([1, 2, None, 3], [1, None, 2, None, 3]), ([0, -1, 1], [0, 1, -1]), ([100, 50, 150], [100, 150, 50]), ([1, 2, 3, None, 4, None, 5], [1, 3, 2, 5, None, 4])]",
                "body": "        result = run_invert_tree(Solution, root_list)\n        assert_invert_tree(result, expected_list)"
            }
        ]
    },
    "playground_imports": "from helpers import run_invert_tree, assert_invert_tree\nfrom solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_setup": "# Example test case\nroot_list: list[int | None] = [4, 2, 7, 1, 3, 6, 9]\nexpected_list: list[int | None] = [4, 7, 2, 9, 6, 3, 1]",
    "playground_run": "result = run_invert_tree(Solution, root_list)\nresult",
    "playground_assert": "assert_invert_tree(result, expected_list)"
}
