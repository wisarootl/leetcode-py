{
    "problem_name": "contains_duplicate",
    "solution_class_name": "Solution",
    "problem_number": "217",
    "problem_title": "Contains Duplicate",
    "difficulty": "Easy",
    "topics": "Array, Hash Table, Sorting",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [1,2,3,1]\nOutput: true\n```\n**Explanation:** The element 1 occurs at the indices 0 and 3."
            },
            {
                "content": "```\nInput: nums = [1,2,3,4]\nOutput: false\n```\n**Explanation:** All elements are distinct."
            },
            { "content": "```\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n```" }
        ]
    },
    "readme_constraints": "- 1 <= nums.length <= 10^5\n- -10^9 <= nums[i] <= 10^9",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "contains_duplicate",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.contains_duplicate(nums)",
    "helpers_assert_name": "contains_duplicate",
    "helpers_assert_signature": "(result: bool, expected: bool) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_contains_duplicate, run_contains_duplicate\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "ContainsDuplicate",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "contains_duplicate",
                "signature": "(self, nums: list[int]) -> bool",
                "body": "        # TODO: Implement contains_duplicate\n        return False"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_contains_duplicate",
                "signature": "(self, nums: list[int], expected: bool)",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 2, 3, 1], True), ([1, 2, 3, 4], False), ([1, 1, 1, 3, 3, 4, 3, 2, 4, 2], True), ([1], False), ([1, 1], True), ([0, 0], True), ([-1, -1], True), ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], False), ([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], False), ([1, 2, 3, 4, 5, 1], True), ([-1000000000, 1000000000, -1000000000], True), ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0], True)]",
                "body": "        result = run_contains_duplicate(Solution, nums)\n        assert_contains_duplicate(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_contains_duplicate, assert_contains_duplicate\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [1, 2, 3, 1]\nexpected = True",
    "playground_run": "result = run_contains_duplicate(Solution, nums)\nresult",
    "playground_assert": "assert_contains_duplicate(result, expected)"
}
