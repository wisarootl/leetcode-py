{
    "problem_name": "container_with_most_water",
    "solution_class_name": "Solution",
    "problem_number": "11",
    "problem_title": "Container With Most Water",
    "difficulty": "Medium",
    "topics": "Array, Two Pointers, Greedy",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)\n\n```\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\n```\n**Explanation:** The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."
            },
            { "content": "```\nInput: height = [1,1]\nOutput: 1\n```" }
        ]
    },
    "readme_constraints": "- n == height.length\n- 2 <= n <= 10^5\n- 0 <= height[i] <= 10^4",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "max_area",
    "helpers_run_signature": "(solution_class: type, height: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.max_area(height)",
    "helpers_assert_name": "max_area",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_max_area, run_max_area\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "ContainerWithMostWater",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "max_area",
                "signature": "(self, height: list[int]) -> int",
                "body": "        # TODO: Implement max_area\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_max_area",
                "signature": "(self, height: list[int], expected: int)",
                "parametrize": "height, expected",
                "test_cases": "[([1,8,6,2,5,4,8,3,7], 49), ([1,1], 1), ([1,2,1], 2), ([2,1], 1), ([1,2,4,3], 4), ([1,3,2,5,25,24,5], 24), ([2,3,4,5,18,17,6], 17), ([1,2,3,4,5], 6), ([5,4,3,2,1], 6), ([0,2], 0), ([3,9,3,4,7,2,12,6], 45), ([1,0,0,0,0,0,0,2,2], 8)]",
                "body": "        result = run_max_area(Solution, height)\n        assert_max_area(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_max_area, assert_max_area\nfrom solution import Solution",
    "playground_setup": "# Example test case\nheight = [1,8,6,2,5,4,8,3,7]\nexpected = 49",
    "playground_run": "result = run_max_area(Solution, height)\nresult",
    "playground_assert": "assert_max_area(result, expected)"
}
