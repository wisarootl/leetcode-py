{
    "problem_name": "reorder_list",
    "solution_class_name": "Solution",
    "problem_number": "143",
    "problem_title": "Reorder List",
    "difficulty": "Medium",
    "topics": "Linked List, Two Pointers, Stack, Recursion",
    "_tags": { "list": ["blind-75"] },
    "readme_description": "You are given the head of a singly linked-list. The list can be represented as:\n\nL0 → L1 → … → Ln - 1 → Ln\n\n*Reorder the list to be on the following form:*\n\nL0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg)\n\n```\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n```"
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg)\n\n```\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n```"
            }
        ]
    },
    "readme_constraints": "- The number of nodes in the list is in the range [1, 5 * 10^4].\n- 1 <= Node.val <= 1000",
    "readme_additional": "",
    "helpers_imports": "from leetcode_py import ListNode",
    "helpers_content": "",
    "helpers_run_name": "reorder_list",
    "helpers_run_signature": "(solution_class: type, head_list: list[int])",
    "helpers_run_body": "    head = ListNode[int].from_list(head_list)\n    implementation = solution_class()\n    implementation.reorder_list(head)\n    return head.to_list()",
    "helpers_assert_name": "reorder_list",
    "helpers_assert_signature": "(result: list[int], expected: list[int]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_reorder_list, run_reorder_list\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "ReorderList",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "reorder_list",
                "signature": "(self, head: ListNode[int] | None) -> None",
                "body": "        # TODO: Implement reorder_list\n        pass"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_reorder_list",
                "signature": "(self, head_list: list[int], expected: list[int])",
                "parametrize": "head_list, expected",
                "test_cases": {
                    "list": [
                        "([1, 2, 3, 4], [1, 4, 2, 3])",
                        "([1, 2, 3, 4, 5], [1, 5, 2, 4, 3])",
                        "([1], [1])",
                        "([1, 2], [1, 2])",
                        "([1, 2, 3], [1, 3, 2])",
                        "([1, 2, 3, 4, 5, 6], [1, 6, 2, 5, 3, 4])",
                        "([1, 2, 3, 4, 5, 6, 7], [1, 7, 2, 6, 3, 5, 4])",
                        "([1, 2, 3, 4, 5, 6, 7, 8], [1, 8, 2, 7, 3, 6, 4, 5])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 9, 2, 8, 3, 7, 4, 6, 5])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 10, 2, 9, 3, 8, 4, 7, 5, 6])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 14, 2, 13, 3, 12, 4, 11, 5, 10, 6, 9, 7, 8])",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 15, 2, 14, 3, 13, 4, 12, 5, 11, 6, 10, 7, 9, 8])"
                    ]
                },
                "body": "        result = run_reorder_list(Solution, head_list)\n        assert_reorder_list(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_reorder_list, assert_reorder_list\nfrom solution import Solution\nfrom leetcode_py import ListNode",
    "playground_setup": "# Example test case\nhead_list: list[int] = [1, 2, 3, 4]\nexpected: list[int] = [1, 4, 2, 3]",
    "playground_run": "result = run_reorder_list(Solution, head_list)\nresult",
    "playground_assert": "assert_reorder_list(result, expected)"
}
