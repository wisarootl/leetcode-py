{
    "problem_name": "insert_interval",
    "solution_class_name": "Solution",
    "problem_number": "57",
    "problem_title": "Insert Interval",
    "difficulty": "Medium",
    "topics": "Array",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the ith interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval.\n\nInsert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary).\n\nReturn `intervals` after the insertion.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n```"
            },
            {
                "content": "```\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n```"
            }
        ]
    },
    "readme_constraints": "- 0 <= intervals.length <= 10^4\n- intervals[i].length == 2\n- 0 <= starti <= endi <= 10^5\n- intervals is sorted by starti in ascending order\n- newInterval.length == 2\n- 0 <= start <= end <= 10^5",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "insert",
    "helpers_run_signature": "(solution_class: type, intervals: list[list[int]], new_interval: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.insert(intervals, new_interval)",
    "helpers_assert_name": "insert",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_insert, run_insert\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "InsertInterval",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "insert",
                "signature": "(self, intervals: list[list[int]], new_interval: list[int]) -> list[list[int]]",
                "body": "        # TODO: Implement insert\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_insert",
                "signature": "(self, intervals: list[list[int]], new_interval: list[int], expected: list[list[int]])",
                "parametrize": "intervals, new_interval, expected",
                "test_cases": "[([[1,3],[6,9]], [2,5], [[1,5],[6,9]]), ([[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8], [[1,2],[3,10],[12,16]]), ([], [5,7], [[5,7]]), ([[1,5]], [2,3], [[1,5]]), ([[1,5]], [6,8], [[1,5],[6,8]]), ([[1,5]], [0,0], [[0,0],[1,5]]), ([[3,5],[12,15]], [6,6], [[3,5],[6,6],[12,15]]), ([[1,2],[4,5]], [3,3], [[1,2],[3,3],[4,5]]), ([[2,5],[6,7],[8,9]], [0,1], [[0,1],[2,5],[6,7],[8,9]]), ([[1,3],[6,9]], [10,12], [[1,3],[6,9],[10,12]]), ([[1,4],[5,6]], [2,3], [[1,4],[5,6]]), ([[1,2],[3,4],[5,6]], [0,7], [[0,7]]), ([[2,3],[5,6]], [1,4], [[1,4],[5,6]]), ([[1,5],[10,15]], [6,9], [[1,5],[6,9],[10,15]])]",
                "body": "        result = run_insert(Solution, intervals, new_interval)\n        assert_insert(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_insert, assert_insert\nfrom solution import Solution",
    "playground_setup": "# Example test case\nintervals = [[1,3],[6,9]]\nnew_interval = [2,5]\nexpected = [[1,5],[6,9]]",
    "playground_run": "result = run_insert(Solution, intervals, new_interval)\nresult",
    "playground_assert": "assert_insert(result, expected)"
}
