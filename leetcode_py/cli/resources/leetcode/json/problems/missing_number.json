{
    "problem_name": "missing_number",
    "solution_class_name": "Solution",
    "problem_number": "268",
    "problem_title": "Missing Number",
    "difficulty": "Easy",
    "topics": "Array, Hash Table, Math, Binary Search, Bit Manipulation, Sorting",
    "_tags": {
        "list": ["blind-75"]
    },
    "readme_description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return *the only number in the range that is missing from the array.*",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [3,0,1]\nOutput: 2\n```\n**Explanation:**\n\n`n = 3` since there are 3 numbers, so all numbers are in the range `[0,3]`. 2 is the missing number in the range since it does not appear in `nums`."
            },
            {
                "content": "```\nInput: nums = [0,1]\nOutput: 2\n```\n**Explanation:**\n\n`n = 2` since there are 2 numbers, so all numbers are in the range `[0,2]`. 2 is the missing number in the range since it does not appear in `nums`."
            },
            {
                "content": "```\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\n```\n**Explanation:**\n\n`n = 9` since there are 9 numbers, so all numbers are in the range `[0,9]`. 8 is the missing number in the range since it does not appear in `nums`."
            }
        ]
    },
    "readme_constraints": "- n == nums.length\n- 1 <= n <= 10^4\n- 0 <= nums[i] <= n\n- All the numbers of nums are **unique**.",
    "readme_additional": "**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "missing_number",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.missing_number(nums)",
    "helpers_assert_name": "assert_missing_number",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_missing_number, run_missing_number\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "TestMissingNumber",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "missing_number",
                "signature": "(self, nums: list[int]) -> int",
                "body": "        # TODO: Implement missing_number\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [
            {
                "name": "setup_method",
                "parameters": "",
                "body": "self.solution = Solution()"
            }
        ]
    },
    "playground_imports": "from helpers import run_missing_number, assert_missing_number\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [3, 0, 1]\nexpected = 2",
    "playground_run": "result = run_missing_number(Solution, nums)\nresult",
    "playground_assert": "assert_missing_number(result, expected)",
    "_test_methods": {
        "list": [
            {
                "name": "test_missing_number",
                "signature": "(self, solution_class, nums: list[int], expected: int)",
                "parametrize": "solution_class, nums, expected",
                "test_cases": {
                    "list": [
                        "(Solution, [3, 0, 1], 2)",
                        "(Solution, [0, 1], 2)",
                        "(Solution, [9, 6, 4, 2, 3, 5, 7, 0, 1], 8)",
                        "(Solution, [0], 1)",
                        "(Solution, [1], 0)",
                        "(Solution, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10)",
                        "(Solution, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0)",
                        "(Solution, [0, 1, 2, 3, 4, 6, 7, 8, 9, 10], 5)",
                        "(Solution, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 0)",
                        "(Solution, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 20)",
                        "(Solution, [2, 0, 1], 3)",
                        "(Solution, [1, 0], 2)",
                        "(Solution, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 101)"
                    ]
                },
                "body": "        result = run_missing_number(solution_class, nums)\n        assert_missing_number(result, expected)"
            }
        ]
    },
    "playground_test_case": "nums = [3, 0, 1]",
    "playground_execution": "result = run_missing_number(Solution, nums)",
    "playground_assertion": "assert_missing_number(result, 2)"
}
