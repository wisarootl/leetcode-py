{
    "problem_name": "number_of_1_bits",
    "solution_class_name": "Solution",
    "problem_number": "191",
    "problem_title": "Number of 1 Bits",
    "difficulty": "Easy",
    "topics": "Divide and Conquer, Bit Manipulation",
    "_tags": { "list": ["blind-75"] },
    "readme_description": "Given a positive integer `n`, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight).",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: n = 11\nOutput: 3\nExplanation:\nThe input binary string 1011 has a total of three set bits.\n```"
            },
            {
                "content": "```\nInput: n = 128\nOutput: 1\nExplanation:\nThe input binary string 10000000 has a total of one set bit.\n```"
            },
            {
                "content": "```\nInput: n = 2147483645\nOutput: 30\nExplanation:\nThe input binary string 1111111111111111111111111111101 has a total of thirty set bits.\n```"
            }
        ]
    },
    "constraints": {
        "list": ["1 <= n <= 2^31 - 1"]
    },
    "readme_constraints": "- 1 <= n <= 2^31 - 1",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "hamming_weight",
    "helpers_run_signature": "(solution_class: type, n: int)",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.hamming_weight(n)",
    "helpers_assert_name": "hamming_weight",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_hamming_weight, run_hamming_weight\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "NumberOf1Bits",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "hamming_weight",
                "signature": "(self, n: int) -> int",
                "body": "        # TODO: Implement hamming_weight\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [
            {
                "name": "setup_method",
                "parameters": "",
                "body": "self.solution = Solution()"
            }
        ]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_hamming_weight",
                "signature": "(self, n: int, expected: int)",
                "parametrize": "n, expected",
                "test_cases": {
                    "list": [
                        "(11, 3)",
                        "(128, 1)",
                        "(2147483645, 30)",
                        "(0, 0)",
                        "(1, 1)",
                        "(2, 1)",
                        "(3, 2)",
                        "(4, 1)",
                        "(5, 2)",
                        "(6, 2)",
                        "(7, 3)",
                        "(8, 1)",
                        "(15, 4)",
                        "(16, 1)",
                        "(255, 8)",
                        "(256, 1)"
                    ]
                },
                "body": "        result = run_hamming_weight(Solution, n)\n        assert_hamming_weight(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_hamming_weight, assert_hamming_weight\nfrom solution import Solution",
    "playground_setup": "# Example test case\nn = 11\nexpected = 3",
    "playground_run": "result = run_hamming_weight(Solution, n)\nresult",
    "playground_assert": "assert_hamming_weight(result, expected)"
}
