{
    "problem_name": "largest_rectangle_in_histogram",
    "solution_class_name": "Solution",
    "problem_number": "84",
    "problem_title": "Largest Rectangle in Histogram",
    "difficulty": "Hard",
    "topics": "Array, Stack, Monotonic Stack",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg)\n\n```\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\n```\n**Explanation:** The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units."
            },
            {
                "content": "![Example 2](https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg)\n\n```\nInput: heights = [2,4]\nOutput: 4\n```"
            }
        ]
    },
    "readme_constraints": "- `1 <= heights.length <= 10^5`\n- `0 <= heights[i] <= 10^4`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "largest_rectangle_area",
    "helpers_run_signature": "(solution_class: type, heights: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.largest_rectangle_area(heights)",
    "helpers_assert_name": "largest_rectangle_area",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_largest_rectangle_area, run_largest_rectangle_area\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "LargestRectangleInHistogram",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "largest_rectangle_area",
                "signature": "(self, heights: list[int]) -> int",
                "body": "        # TODO: Implement largest_rectangle_area\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_largest_rectangle_area",
                "signature": "(self, heights: list[int], expected: int)",
                "parametrize": "heights, expected",
                "test_cases": "[([2, 1, 5, 6, 2, 3], 10), ([2, 4], 4), ([1], 1), ([0], 0), ([1, 1], 2), ([0, 0, 0], 0), ([1, 2, 3, 4, 5], 9), ([5, 4, 3, 2, 1], 9), ([3, 3, 3, 3], 12), ([2, 1, 2], 3), ([1, 3, 1], 3), ([6, 7, 5, 2, 4, 5, 9, 3], 16), ([4, 2, 0, 3, 2, 5], 6), ([1, 2, 2, 1], 4), ([0, 9], 9), ([9, 0], 9)]",
                "body": "        result = run_largest_rectangle_area(Solution, heights)\n        assert_largest_rectangle_area(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_largest_rectangle_area, assert_largest_rectangle_area\nfrom solution import Solution",
    "playground_setup": "# Example test case\nheights = [2, 1, 5, 6, 2, 3]\nexpected = 10",
    "playground_run": "result = run_largest_rectangle_area(Solution, heights)\nresult",
    "playground_assert": "assert_largest_rectangle_area(result, expected)"
}
