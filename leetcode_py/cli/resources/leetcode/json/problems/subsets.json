{
    "problem_name": "subsets",
    "solution_class_name": "Solution",
    "problem_number": "78",
    "problem_title": "Subsets",
    "difficulty": "Medium",
    "topics": "Array, Backtracking, Bit Manipulation",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an integer array `nums` of **unique** elements, return *all possible* subsets (the power set).\n\nThe solution set **must not** contain duplicate subsets. Return the solution in **any order**.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n```"
            },
            { "content": "```\nInput: nums = [0]\nOutput: [[],[0]]\n```" }
        ]
    },
    "readme_constraints": "- 1 <= nums.length <= 10\n- -10 <= nums[i] <= 10\n- All the numbers of nums are unique.",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "subsets",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.subsets(nums)",
    "helpers_assert_name": "subsets",
    "helpers_assert_signature": "(result: list[list[int]], expected: list[list[int]]) -> bool",
    "helpers_assert_body": "    # Sort both result and expected for comparison since order doesn't matter\n    result_sorted = [sorted(subset) for subset in sorted(result)]\n    expected_sorted = [sorted(subset) for subset in sorted(expected)]\n    assert result_sorted == expected_sorted\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_subsets, run_subsets\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "Subsets",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "subsets",
                "signature": "(self, nums: list[int]) -> list[list[int]]",
                "body": "        # TODO: Implement subsets\n        return []"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_subsets",
                "signature": "(self, nums: list[int], expected: list[list[int]])",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 2, 3], [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]), ([0], [[], [0]]), ([1], [[], [1]]), ([1, 2], [[], [1], [2], [1, 2]]), ([4, 1, 0], [[], [4], [4, 1], [4, 1, 0], [4, 0], [1], [1, 0], [0]]), ([-1, 0, 1], [[], [-1], [-1, 0], [-1, 0, 1], [-1, 1], [0], [0, 1], [1]]), ([5], [[], [5]]), ([2, 1, 3], [[], [2], [2, 1], [2, 1, 3], [2, 3], [1], [1, 3], [3]]), ([10], [[], [10]]), ([-10, 10], [[], [-10], [-10, 10], [10]]), ([1, 2, 3, 4], [[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 4], [1, 3], [1, 3, 4], [1, 4], [2], [2, 3], [2, 3, 4], [2, 4], [3], [3, 4], [4]]), ([5, 2], [[], [5], [5, 2], [2]])]",
                "body": "        result = run_subsets(Solution, nums)\n        assert_subsets(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_subsets, assert_subsets\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [1, 2, 3]\nexpected = [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]",
    "playground_run": "result = run_subsets(Solution, nums)\nresult",
    "playground_assert": "assert_subsets(result, expected)"
}
