{
    "problem_name": "partition_equal_subset_sum",
    "solution_class_name": "Solution",
    "problem_number": "416",
    "problem_title": "Partition Equal Subset Sum",
    "difficulty": "Medium",
    "topics": "Array, Dynamic Programming",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given an integer array `nums`, return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or `false` otherwise.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [1,5,11,5]\nOutput: true\n```\n**Explanation:** The array can be partitioned as [1, 5, 5] and [11]."
            },
            {
                "content": "```\nInput: nums = [1,2,3,5]\nOutput: false\n```\n**Explanation:** The array cannot be partitioned into equal sum subsets."
            }
        ]
    },
    "readme_constraints": "- 1 <= nums.length <= 200\n- 1 <= nums[i] <= 100",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "can_partition",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.can_partition(nums)",
    "helpers_assert_name": "can_partition",
    "helpers_assert_signature": "(result: bool, expected: bool) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_can_partition, run_can_partition\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "PartitionEqualSubsetSum",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "can_partition",
                "signature": "(self, nums: list[int]) -> bool",
                "body": "        # TODO: Implement can_partition\n        return False"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_can_partition",
                "signature": "(self, nums: list[int], expected: bool)",
                "parametrize": "nums, expected",
                "test_cases": "[([1, 5, 11, 5], True), ([1, 2, 3, 5], False), ([1, 1], True), ([1], False), ([2, 2, 1, 1], True), ([100], False), ([1, 2, 5], False), ([1, 3, 5, 7], True), ([2, 2, 3, 5], False), ([1, 2, 3, 4, 5, 6, 7], True), ([3, 3, 3, 4, 5], True), ([1, 1, 1, 1], True), ([23, 13, 11, 7, 6, 5, 5], True), ([1, 5, 3], False), ([4, 4, 4, 4, 4, 4], True)]",
                "body": "        result = run_can_partition(Solution, nums)\n        assert_can_partition(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_can_partition, assert_can_partition\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [1, 5, 11, 5]\nexpected = True",
    "playground_run": "result = run_can_partition(Solution, nums)\nresult",
    "playground_assert": "assert_can_partition(result, expected)"
}
