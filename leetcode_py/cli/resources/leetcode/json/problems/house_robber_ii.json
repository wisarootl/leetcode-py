{
    "problem_name": "house_robber_ii",
    "solution_class_name": "Solution",
    "problem_number": "213",
    "problem_title": "House Robber II",
    "difficulty": "Medium",
    "topics": "Array, Dynamic Programming",
    "_tags": {
        "list": ["blind-75"]
    },
    "readme_description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.",
    "_readme_examples": {
        "list": [
            {
                "content": "```\nInput: nums = [2,3,2]\nOutput: 3\n```\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."
            },
            {
                "content": "```\nInput: nums = [1,2,3,1]\nOutput: 4\n```\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."
            },
            {
                "content": "```\nInput: nums = [1,2,3]\nOutput: 3\n```"
            }
        ]
    },
    "readme_constraints": "- 1 <= nums.length <= 100\n- 0 <= nums[i] <= 1000",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "rob",
    "helpers_run_signature": "(solution_class: type, nums: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.rob(nums)",
    "helpers_assert_name": "rob",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_rob, run_rob\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "HouseRobberII",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "rob",
                "signature": "(self, nums: list[int]) -> int",
                "body": "        # TODO: Implement rob\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [
            {
                "name": "setup_method",
                "parameters": "",
                "body": "self.solution = Solution()"
            }
        ]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_rob",
                "signature": "(self, nums: list[int], expected: int)",
                "parametrize": "nums, expected",
                "test_cases": {
                    "list": [
                        "([2, 3, 2], 3)",
                        "([1, 2, 3, 1], 4)",
                        "([1, 2, 3], 3)",
                        "([1], 1)",
                        "([1, 2], 2)",
                        "([2, 1, 1, 2], 3)",
                        "([1, 2, 3, 4, 5], 8)",
                        "([2, 3, 2, 3, 2], 6)",
                        "([1, 2, 1, 1], 3)",
                        "([2, 1, 1, 1], 3)",
                        "([1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 16)",
                        "([0], 0)",
                        "([0, 0], 0)",
                        "([1, 0, 0, 1], 1)",
                        "([2, 7, 9, 3, 1], 11)",
                        "([1, 2, 3, 1, 2, 3], 6)",
                        "([2, 1, 1, 2, 1, 1], 4)",
                        "([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30)",
                        "([100, 1, 1, 100], 101)",
                        "([1, 100, 1, 1, 100], 200)"
                    ]
                },
                "body": "        result = run_rob(Solution, nums)\n        assert_rob(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_rob, assert_rob\nfrom solution import Solution",
    "playground_setup": "# Example test case\nnums = [2, 3, 2]\nexpected = 3",
    "playground_run": "result = run_rob(Solution, nums)\nresult",
    "playground_assert": "assert_rob(result, expected)"
}
