{
    "problem_name": "trapping_rain_water",
    "solution_class_name": "Solution",
    "problem_number": "42",
    "problem_title": "Trapping Rain Water",
    "difficulty": "Hard",
    "topics": "Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack",
    "_tags": { "list": ["grind-75"] },
    "readme_description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
    "_readme_examples": {
        "list": [
            {
                "content": "![Example 1](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png)\n\n```\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\n```\n**Explanation:** The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
            },
            { "content": "```\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n```" }
        ]
    },
    "readme_constraints": "- `n == height.length`\n- `1 <= n <= 2 * 10^4`\n- `0 <= height[i] <= 10^5`",
    "readme_additional": "",
    "helpers_imports": "",
    "helpers_content": "",
    "helpers_run_name": "trap",
    "helpers_run_signature": "(solution_class: type, height: list[int])",
    "helpers_run_body": "    implementation = solution_class()\n    return implementation.trap(height)",
    "helpers_assert_name": "trap",
    "helpers_assert_signature": "(result: int, expected: int) -> bool",
    "helpers_assert_body": "    assert result == expected\n    return True",
    "solution_imports": "",
    "solution_contents": "",
    "solution_class_content": "",
    "test_imports": "import pytest\nfrom leetcode_py import logged_test\nfrom .helpers import assert_trap, run_trap\nfrom .solution import Solution",
    "test_content": "",
    "test_class_name": "TrappingRainWater",
    "test_class_content": "    def setup_method(self):\n        self.solution = Solution()",
    "_solution_methods": {
        "list": [
            {
                "name": "trap",
                "signature": "(self, height: list[int]) -> int",
                "body": "        # TODO: Implement trap\n        return 0"
            }
        ]
    },
    "_test_helper_methods": {
        "list": [{ "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }]
    },
    "_test_methods": {
        "list": [
            {
                "name": "test_trap",
                "signature": "(self, height: list[int], expected: int)",
                "parametrize": "height, expected",
                "test_cases": "[([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], 6), ([4, 2, 0, 3, 2, 5], 9), ([3, 0, 2, 0, 4], 7), ([0], 0), ([1], 0), ([1, 2], 0), ([2, 1], 0), ([3, 2, 0, 4], 4), ([5, 4, 1, 2], 1), ([2, 0, 2], 2), ([1, 0, 1], 1), ([0, 2, 0], 0), ([1, 2, 1], 0), ([5, 2, 7, 2, 6, 1, 5, 3, 2, 1], 11), ([0, 0, 0, 0], 0)]",
                "body": "        result = run_trap(Solution, height)\n        assert_trap(result, expected)"
            }
        ]
    },
    "playground_imports": "from helpers import run_trap, assert_trap\nfrom solution import Solution",
    "playground_setup": "# Example test case\nheight = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\nexpected = 6",
    "playground_run": "result = run_trap(Solution, height)\nresult",
    "playground_assert": "assert_trap(result, expected)"
}
