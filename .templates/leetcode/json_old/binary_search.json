{
    "problem_name": "binary_search",
    "solution_class_name": "Solution",
    "problem_number": "704",
    "problem_title": "Binary Search",
    "difficulty": "Easy",
    "topics": "Array, Binary Search",
    "tags": ["grind-75"],
    "readme_description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.",
    "readme_examples": [
        {
            "content": "```\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\n```\n**Explanation:** 9 exists in nums and its index is 4"
        },
        {
            "content": "```\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\n```\n**Explanation:** 2 does not exist in nums so return -1"
        }
    ],
    "readme_constraints": "- `1 <= nums.length <= 10^4`\n- `-10^4 < nums[i], target < 10^4`\n- All the integers in `nums` are **unique**.\n- `nums` is sorted in ascending order.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "search",
            "parameters": "nums: list[int], target: int",
            "return_type": "int",
            "dummy_return": "-1"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "BinarySearch",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_search",
            "parametrize": "nums, target, expected",
            "parametrize_typed": "nums: list[int], target: int, expected: int",
            "test_cases": "[([\u22121, 0, 3, 5, 9, 12], 9, 4), ([\u22121, 0, 3, 5, 9, 12], 2, \u22121), ([5], 5, 0), ([5], \u22125, \u22121), ([1, 3, 5, 7, 9], 1, 0), ([1, 3, 5, 7, 9], 9, 4), ([1, 3, 5, 7, 9], 4, \u22121)]",
            "body": "result = self.solution.search(nums, target)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [-1, 0, 3, 5, 9, 12]\ntarget = 9\nexpected = 4",
    "playground_execution": "result = Solution().search(nums, target)\nresult",
    "playground_assertion": "assert result == expected"
}
