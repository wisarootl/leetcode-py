{
    "problem_name": "merge_two_sorted_lists",
    "solution_class_name": "Solution",
    "problem_number": "21",
    "problem_title": "Merge Two Sorted Lists",
    "difficulty": "Easy",
    "topics": "Linked List, Recursion",
    "tags": ["grind-75"],
    "readme_description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn *the head of the merged linked list*.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n```\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n```"
        },
        { "content": "```\nInput: list1 = [], list2 = []\nOutput: []\n```" },
        { "content": "```\nInput: list1 = [], list2 = [0]\nOutput: [0]\n```" }
    ],
    "readme_constraints": "- The number of nodes in both lists is in the range `[0, 50]`.\n- `-100 <= Node.val <= 100`\n- Both `list1` and `list2` are sorted in **non-decreasing** order.",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "merge_two_lists",
            "parameters": "list1: ListNode | None, list2: ListNode | None",
            "return_type": "ListNode | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import ListNode\nfrom .solution import Solution",
    "test_class_name": "MergeTwoSortedLists",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_merge_two_lists",
            "parametrize": "list1_vals, list2_vals, expected_vals",
            "parametrize_typed": "list1_vals: list[int], list2_vals: list[int], expected_vals: list[int]",
            "test_cases": "[([1, 2, 4], [1, 3, 4], [1, 1, 2, 3, 4, 4]), ([], [], []), ([], [0], [0]), ([1], [2], [1, 2]), ([2], [1], [1, 2])]",
            "body": "list1 = ListNode.from_list(list1_vals)\nlist2 = ListNode.from_list(list2_vals)\nexpected = ListNode.from_list(expected_vals)\nresult = self.solution.merge_two_lists(list1, list2)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import ListNode",
    "playground_test_case": "# Example test case\nlist1_vals = [1, 2, 4]\nlist2_vals = [1, 3, 4]\nexpected_vals = [1, 1, 2, 3, 4, 4]",
    "playground_execution": "list1 = ListNode.from_list(list1_vals)\nlist2 = ListNode.from_list(list2_vals)\nresult = Solution().merge_two_lists(list1, list2)\nresult",
    "playground_assertion": "expected = ListNode.from_list(expected_vals)\nassert result == expected"
}
