{
    "problem_name": "longest_palindrome",
    "solution_class_name": "Solution",
    "problem_number": "409",
    "problem_title": "Longest Palindrome",
    "difficulty": "Easy",
    "topics": "Hash Table, String, Greedy",
    "tags": ["grind-75"],
    "readme_description": "Given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\n\nLetters are case sensitive, for example, \"Aa\" is not considered a palindrome.",
    "readme_examples": [
        {
            "content": "```\nInput: s = \"abccccdd\"\nOutput: 7\n```\n**Explanation:** One longest palindrome that can be built is \"dccaccd\", whose length is 7."
        },
        {
            "content": "```\nInput: s = \"a\"\nOutput: 1\n```\n**Explanation:** The longest palindrome that can be built is \"a\", whose length is 1."
        }
    ],
    "readme_constraints": "- `1 <= s.length <= 2000`\n- `s` consists of lowercase and/or uppercase English letters only.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "longest_palindrome",
            "parameters": "s: str",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "LongestPalindrome",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_longest_palindrome",
            "parametrize": "s, expected",
            "parametrize_typed": "s: str, expected: int",
            "test_cases": "[('abccccdd', 7), ('a', 1), ('Aa', 1), ('aabbcc', 6)]",
            "body": "result = self.solution.longest_palindrome(s)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\ns = 'abccccdd'\nexpected = 7",
    "playground_execution": "result = Solution().longest_palindrome(s)\nresult",
    "playground_assertion": "assert result == expected"
}
