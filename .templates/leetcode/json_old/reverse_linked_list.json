{
    "problem_name": "reverse_linked_list",
    "solution_class_name": "Solution",
    "problem_number": "206",
    "problem_title": "Reverse Linked List",
    "difficulty": "Easy",
    "topics": "Linked List, Recursion",
    "tags": ["grind-75"],
    "readme_description": "Given the `head` of a singly linked list, reverse the list, and return the reversed list.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)\n\n```\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n```"
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg)\n\n```\nInput: head = [1,2]\nOutput: [2,1]\n```"
        },
        { "content": "```\nInput: head = []\nOutput: []\n```" }
    ],
    "readme_constraints": "- The number of nodes in the list is the range `[0, 5000]`.\n- `-5000 <= Node.val <= 5000`",
    "readme_additional": "**Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "reverse_list",
            "parameters": "head: ListNode[int] | None",
            "return_type": "ListNode[int] | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import ListNode\nfrom .solution import Solution",
    "test_class_name": "ReverseLinkedList",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_reverse_list",
            "parametrize": "head_list, expected_list",
            "parametrize_typed": "head_list: list[int], expected_list: list[int]",
            "test_cases": "[([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]), ([1, 2], [2, 1]), ([1], [1]), ([], []), ([1, 2, 3], [3, 2, 1]), ([1, 2, 3, 4], [4, 3, 2, 1]), ([-1, -2, -3], [-3, -2, -1]), ([0], [0]), ([5000, -5000], [-5000, 5000]), ([1, 1, 1], [1, 1, 1])]",
            "body": "head = ListNode.from_list(head_list)\nexpected = ListNode.from_list(expected_list)\nresult = self.solution.reverse_list(head)\nassert result == expected"
        }
    ],
    "playground_imports": "from leetcode_py import ListNode\nfrom solution import Solution",
    "playground_test_case": "# Example test case\nhead_list = [1, 2, 3, 4, 5]\nexpected_list = [5, 4, 3, 2, 1]\nhead = ListNode.from_list(head_list)\nexpected = ListNode.from_list(expected_list)",
    "playground_execution": "result = Solution().reverse_list(head)\nresult",
    "playground_assertion": "assert result == expected"
}
