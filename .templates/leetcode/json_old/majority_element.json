{
    "problem_name": "majority_element",
    "solution_class_name": "Solution",
    "problem_number": "169",
    "problem_title": "Majority Element",
    "difficulty": "Easy",
    "topics": "Array, Hash Table, Divide and Conquer, Sorting, Counting",
    "tags": ["grind-75"],
    "readme_description": "Given an array `nums` of size `n`, return the majority element.\n\nThe majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.",
    "readme_examples": [
        { "content": "```\nInput: nums = [3,2,3]\nOutput: 3\n```" },
        { "content": "```\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n```" }
    ],
    "readme_constraints": "- n == nums.length\n- 1 <= n <= 5 * 10^4\n- -10^9 <= nums[i] <= 10^9",
    "readme_additional": "**Follow-up:** Could you solve the problem in linear time and in O(1) space?",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "majority_element",
            "parameters": "nums: list[int]",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "MajorityElement",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_majority_element",
            "parametrize": "nums, expected",
            "parametrize_typed": "nums: list[int], expected: int",
            "test_cases": "[([3,2,3], 3), ([2,2,1,1,1,2,2], 2), ([1], 1), ([1,1,2], 1), ([2,2,2,1,1], 2)]",
            "body": "result = self.solution.majority_element(nums)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [3,2,3]\nexpected = 3",
    "playground_execution": "result = Solution().majority_element(nums)\nresult",
    "playground_assertion": "assert result == expected"
}
