{
    "problem_name": "balanced_binary_tree",
    "solution_class_name": "Solution",
    "problem_number": "110",
    "problem_title": "Balanced Binary Tree",
    "difficulty": "Easy",
    "topics": "Tree, Depth-First Search, Binary Tree",
    "tags": ["grind-75"],
    "readme_description": "Given a binary tree, determine if it is **height-balanced**.\n\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: true\n```"
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg)\n\n```\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n```"
        },
        { "content": "```\nInput: root = []\nOutput: true\n```" }
    ],
    "readme_constraints": "- The number of nodes in the tree is in the range `[0, 5000]`.\n- `-10^4 <= Node.val <= 10^4`",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_methods": [
        {
            "name": "is_balanced",
            "parameters": "root: TreeNode | None",
            "return_type": "bool",
            "dummy_return": "False"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import TreeNode\nfrom .solution import Solution",
    "test_class_name": "BalancedBinaryTree",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_is_balanced",
            "parametrize": "root_list, expected",
            "parametrize_typed": "root_list: list[int | None], expected: bool",
            "test_cases": "[([3, 9, 20, None, None, 15, 7], True), ([1, 2, 2, 3, 3, None, None, 4, 4], False), ([], True)]",
            "body": "root = TreeNode.from_list(root_list)\nresult = self.solution.is_balanced(root)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_test_case": "# Example test case\nroot_list = [3, 9, 20, None, None, 15, 7]\nroot = TreeNode.from_list(root_list)\nexpected = True",
    "playground_execution": "result = Solution().is_balanced(root)\nresult",
    "playground_assertion": "assert result == expected"
}
