{
    "problem_name": "sort_colors",
    "solution_class_name": "Solution",
    "problem_number": "75",
    "problem_title": "Sort Colors",
    "difficulty": "Medium",
    "topics": "Array, Two Pointers, Sorting",
    "tags": ["grind-75"],
    "readme_description": "Given an array `nums` with `n` objects colored red, white, or blue, sort them **in-place** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\nYou must solve this problem without using the library's sort function.",
    "readme_examples": [
        { "content": "```\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n```" },
        { "content": "```\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n```" }
    ],
    "readme_constraints": "- `n == nums.length`\n- `1 <= n <= 300`\n- `nums[i]` is either `0`, `1`, or `2`.",
    "readme_additional": "**Follow up:** Could you come up with a one-pass algorithm using only constant extra space?",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "sort_colors",
            "parameters": "nums: list[int]",
            "return_type": "None",
            "dummy_return": ""
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "SortColors",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_sort_colors",
            "parametrize": "nums, expected",
            "parametrize_typed": "nums: list[int], expected: list[int]",
            "test_cases": "[([2, 0, 2, 1, 1, 0], [0, 0, 1, 1, 2, 2]), ([2, 0, 1], [0, 1, 2]), ([0], [0]), ([1], [1]), ([2], [2]), ([0, 1, 2], [0, 1, 2])]",
            "body": "nums_copy = nums.copy()\nself.solution.sort_colors(nums_copy)\nassert nums_copy == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [2, 0, 2, 1, 1, 0]\nexpected = [0, 0, 1, 1, 2, 2]",
    "playground_execution": "nums_copy = nums.copy()\nSolution().sort_colors(nums_copy)\nnums_copy",
    "playground_assertion": "assert nums_copy == expected"
}
