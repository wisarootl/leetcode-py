{
    "problem_name": "invert_binary_tree",
    "solution_class_name": "Solution",
    "problem_number": "226",
    "problem_title": "Invert Binary Tree",
    "difficulty": "Easy",
    "topics": "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    "tags": ["grind-75"],
    "readme_description": "Given the `root` of a binary tree, invert the tree, and return its root.",
    "readme_examples": [
        { "content": "```\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n```" },
        { "content": "```\nInput: root = [2,1,3]\nOutput: [2,3,1]\n```" },
        { "content": "```\nInput: root = []\nOutput: []\n```" }
    ],
    "readme_constraints": "- The number of nodes in the tree is in the range [0, 100]\n- -100 <= Node.val <= 100",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_methods": [
        {
            "name": "invert_tree",
            "parameters": "root: TreeNode[int] | None",
            "return_type": "TreeNode[int] | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\n\nfrom leetcode_py import TreeNode\nfrom leetcode_py.test_utils import logged_test\n\nfrom .solution import Solution",
    "test_class_name": "InvertBinaryTree",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_invert_tree",
            "parametrize": "root_list, expected_list",
            "parametrize_typed": "root_list: list[int | None], expected_list: list[int | None]",
            "test_cases": "[([4, 2, 7, 1, 3, 6, 9], [4, 7, 2, 9, 6, 3, 1]), ([2, 1, 3], [2, 3, 1]), ([], [])]",
            "body": "root = TreeNode[int].from_list(root_list)\nexpected = TreeNode[int].from_list(expected_list)\nresult = self.solution.invert_tree(root)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\n\nfrom leetcode_py import TreeNode",
    "playground_test_case": "# Example test case\nroot_list: list[int | None] = [4, 2, 7, 1, 3, 6, 9]\nroot = TreeNode[int].from_list(root_list)\nexpected = TreeNode[int].from_list([4, 7, 2, 9, 6, 3, 1])",
    "playground_execution": "result = Solution().invert_tree(root)\nresult",
    "playground_assertion": "assert result == expected"
}
