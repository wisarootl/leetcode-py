{
    "problem_name": "merge_k_sorted_lists",
    "solution_class_name": "Solution",
    "problem_number": "23",
    "problem_title": "Merge k Sorted Lists",
    "difficulty": "Hard",
    "topics": "Linked List, Divide and Conquer, Heap (Priority Queue), Merge Sort",
    "tags": ["grind-75"],
    "readme_description": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.\n\n*Merge all the linked-lists into one sorted linked-list and return it.*",
    "readme_examples": [
        {
            "content": "```\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\n```\n**Explanation:** The linked-lists are:\n```\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n```\nmerging them into one sorted linked list:\n```\n1->1->2->3->4->4->5->6\n```"
        },
        { "content": "```\nInput: lists = []\nOutput: []\n```" },
        { "content": "```\nInput: lists = [[]]\nOutput: []\n```" }
    ],
    "readme_constraints": "- `k == lists.length`\n- `0 <= k <= 10^4`\n- `0 <= lists[i].length <= 500`\n- `-10^4 <= lists[i][j] <= 10^4`\n- `lists[i]` is sorted in ascending order.\n- The sum of `lists[i].length` will not exceed `10^4`.",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "merge_k_lists",
            "parameters": "lists: list[ListNode | None]",
            "return_type": "ListNode | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import ListNode\nfrom .solution import Solution",
    "test_class_name": "MergeKSortedLists",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_merge_k_lists",
            "parametrize": "lists_data, expected_data",
            "parametrize_typed": "lists_data: list[list[int]], expected_data: list[int]",
            "test_cases": "[([[1, 4, 5], [1, 3, 4], [2, 6]], [1, 1, 2, 3, 4, 4, 5, 6]), ([], []), ([[]], []), ([[1]], [1]), ([[1, 2], [3, 4]], [1, 2, 3, 4]), ([[5], [1, 3], [2, 4, 6]], [1, 2, 3, 4, 5, 6]), ([[-1, 0, 1], [-2, 2]], [-2, -1, 0, 1, 2]), ([[1, 1, 1], [2, 2, 2]], [1, 1, 1, 2, 2, 2]), ([[]], []), ([[], [1], []], [1])]",
            "body": "lists = [ListNode.from_list(lst) for lst in lists_data]\nresult = self.solution.merge_k_lists(lists)\nexpected = ListNode.from_list(expected_data)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import ListNode",
    "playground_test_case": "# Example test case\nlists_data = [[1, 4, 5], [1, 3, 4], [2, 6]]\nlists = [ListNode.from_list(lst) for lst in lists_data]\nexpected_data = [1, 1, 2, 3, 4, 4, 5, 6]",
    "playground_execution": "result = Solution().merge_k_lists(lists)\nListNode.to_list(result) if result else []",
    "playground_assertion": "expected = ListNode.from_list(expected_data)\nassert result == expected"
}
