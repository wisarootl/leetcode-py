{
    "problem_name": "valid_anagram",
    "solution_class_name": "Solution",
    "problem_number": "242",
    "problem_title": "Valid Anagram",
    "difficulty": "Easy",
    "topics": "Hash Table, String, Sorting",
    "tags": ["grind-75"],
    "readme_description": "Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.",
    "readme_examples": [
        { "content": "```\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\n```" },
        { "content": "```\nInput: s = \"rat\", t = \"car\"\nOutput: false\n```" }
    ],
    "readme_constraints": "- 1 <= s.length, t.length <= 5 * 10^4\n- s and t consist of lowercase English letters.",
    "readme_additional": "**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "is_anagram",
            "parameters": "s: str, t: str",
            "return_type": "bool",
            "dummy_return": "False"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "ValidAnagram",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_is_anagram",
            "parametrize": "s, t, expected",
            "parametrize_typed": "s: str, t: str, expected: bool",
            "test_cases": "[('anagram', 'nagaram', True), ('rat', 'car', False), ('listen', 'silent', True), ('hello', 'bello', False), ('', '', True), ('a', 'a', True), ('a', 'b', False), ('ab', 'ba', True)]",
            "body": "result = self.solution.is_anagram(s, t)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\ns = 'anagram'\nt = 'nagaram'\nexpected = True",
    "playground_execution": "result = Solution().is_anagram(s, t)\nresult",
    "playground_assertion": "assert result == expected"
}
