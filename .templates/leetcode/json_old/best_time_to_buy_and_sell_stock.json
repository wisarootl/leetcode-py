{
    "problem_name": "best_time_to_buy_and_sell_stock",
    "solution_class_name": "Solution",
    "problem_number": "121",
    "problem_title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "topics": "Array, Dynamic Programming",
    "tags": ["grind-75"],
    "readme_description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn *the maximum profit you can achieve from this transaction*. If you cannot achieve any profit, return `0`.",
    "readme_examples": [
        {
            "content": "```\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\n```\n**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."
        },
        {
            "content": "```\nInput: prices = [7,6,4,3,1]\nOutput: 0\n```\n**Explanation:** In this case, no transactions are done and the max profit = 0."
        }
    ],
    "readme_constraints": "- 1 <= prices.length <= 10^5\n- 0 <= prices[i] <= 10^4",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "max_profit",
            "parameters": "prices: list[int]",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "BestTimeToBuyAndSellStock",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_max_profit",
            "parametrize": "prices, expected",
            "parametrize_typed": "prices: list[int], expected: int",
            "test_cases": "[([7, 1, 5, 3, 6, 4], 5), ([7, 6, 4, 3, 1], 0), ([1, 2, 3, 4, 5], 4), ([5, 4, 3, 2, 1], 0), ([1], 0), ([2, 1], 0), ([1, 2], 1), ([3, 2, 6, 5, 0, 3], 4)]",
            "body": "result = self.solution.max_profit(prices)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nprices = [7, 1, 5, 3, 6, 4]\nexpected = 5",
    "playground_execution": "result = Solution().max_profit(prices)\nresult",
    "playground_assertion": "assert result == expected"
}
