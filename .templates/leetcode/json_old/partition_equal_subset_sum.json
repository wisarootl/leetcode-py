{
    "problem_name": "partition_equal_subset_sum",
    "solution_class_name": "Solution",
    "problem_number": "416",
    "problem_title": "Partition Equal Subset Sum",
    "difficulty": "Medium",
    "topics": "Array, Dynamic Programming",
    "tags": ["grind-75"],
    "readme_description": "Given an integer array `nums`, return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or `false` otherwise.",
    "readme_examples": [
        {
            "content": "```\nInput: nums = [1,5,11,5]\nOutput: true\n```\n**Explanation:** The array can be partitioned as [1, 5, 5] and [11]."
        },
        {
            "content": "```\nInput: nums = [1,2,3,5]\nOutput: false\n```\n**Explanation:** The array cannot be partitioned into equal sum subsets."
        }
    ],
    "readme_constraints": "- 1 <= nums.length <= 200\n- 1 <= nums[i] <= 100",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "can_partition",
            "parameters": "nums: list[int]",
            "return_type": "bool",
            "dummy_return": "False"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "PartitionEqualSubsetSum",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_can_partition",
            "parametrize": "nums, expected",
            "parametrize_typed": "nums: list[int], expected: bool",
            "test_cases": "[([1, 5, 11, 5], True), ([1, 2, 3, 5], False), ([1, 1], True), ([1], False), ([2, 2, 1, 1], True)]",
            "body": "result = self.solution.can_partition(nums)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [1, 5, 11, 5]\nexpected = True",
    "playground_execution": "result = Solution().can_partition(nums)\nresult",
    "playground_assertion": "assert result == expected"
}
