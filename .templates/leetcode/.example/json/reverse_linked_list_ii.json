{
    "assertion_code": "assert (result.to_list() if result else []) == expected",
    "class_name": "ReverseLinkedListII",
    "constraints": "- The number of nodes in the list is n.\n- 1 <= n <= 500\n- -500 <= Node.val <= 500\n- 1 <= left <= right <= n",
    "difficulty": "Medium",
    "examples": [
        { "input": "head = [1,2,3,4,5], left = 2, right = 4", "output": "[1,4,3,2,5]" },
        { "input": "head = [5], left = 1, right = 1", "output": "[5]" }
    ],
    "expected_output_setup": "expected = ListNode.from_list([1, 4, 3, 2, 5])",
    "expected_param": "expected",
    "imports": "from leetcode_py.list_node import ListNode",
    "input_description": "head_list={head_list}, left={left}, right={right}",
    "input_params": "head, left, right",
    "method_args": "head, left, right",
    "method_name": "reverse_between",
    "param_names": "head_list, left, right, expected",
    "param_names_with_types": "head_list: list[int], left: int, right: int, expected: list[int]",
    "parameters": "head: ListNode | None, left: int, right: int",
    "problem_description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",
    "problem_number": "92",
    "problem_title": "Reverse Linked List II",
    "question_name": "reverse_linked_list_ii",
    "return_type": "ListNode | None",
    "test_cases": [
        { "args": [[1, 2, 3, 4, 5], 2, 4], "expected": [1, 4, 3, 2, 5] },
        { "args": [[5], 1, 1], "expected": [5] },
        { "args": [[1, 2, 3], 1, 3], "expected": [3, 2, 1] }
    ],
    "test_input_setup": "# Example test case\\nhead = ListNode.from_list([1, 2, 3, 4, 5])\\nleft = 2\\nright = 4",
    "test_logging": "logger.success(f\"Got result: {result.to_list() if result else []}\")",
    "test_setup": "head = ListNode.from_list(head_list)",
    "topics": "Linked List"
}
