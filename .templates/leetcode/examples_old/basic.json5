{
  // Basic problem template - for array, string, number problems
  // Example: Container With Most Water, Spiral Matrix
  // NOTE: PascalCase naming - keep acronyms/Roman numerals ALL CAPS (LRUCache, ReverseLinkedListII)

  // === PROBLEM IDENTIFICATION ===
  "problem_name": "container_with_most_water",        // snake_case: used for directory/file names
  "solution_class_name": "Solution",                  // Always "Solution" for basic problems
  "problem_number": "11",                            // LeetCode problem number as string
  "problem_title": "Container With Most Water",       // Exact title from LeetCode
  "difficulty": "Medium",                            // Easy, Medium, Hard
  "topics": "Array, Two Pointers, Greedy",          // Comma-separated topics from LeetCode
  "tags": ["grind-75"],                             // Optional: common problem set tags

  // === README CONTENT ===
  // IMPORTANT: Preserve rich HTML content from LeetCode including:
  // - Code snippets with backticks: `code`
  // - Bold text: **bold** or <strong>bold</strong>
  // - Italic text: *italic* or <em>italic</em>
  // - Images: <img> tags with proper src and styling
  // - HTML formatting: <p>, <br>, <ul>, <li>, etc.
  // - Mathematical expressions and special characters
  "readme_description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.",

  "readme_examples": [
    {
      // Include images for visual problems - use HTML img tags
      "content": "<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n\n```\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n```"
    },
    {
      // Additional examples without images
      "content": "```\nInput: height = [1,1]\nOutput: 1\n```"
    }
  ],

  "readme_constraints": "- n == height.length\n- 2 <= n <= 10^5\n- 0 <= height[i] <= 10^4",
  "readme_additional": "",                           // Optional: additional notes, follow-up questions

  // === SOLUTION TEMPLATE ===
  "solution_imports": "",                            // Empty for basic problems
                                                    // For tree: "from leetcode_py import TreeNode"
                                                    // For linked list: "from leetcode_py import ListNode"
  "solution_methods": [
    {
      "name": "max_area",                           // snake_case method name
      "parameters": "height: list[int]",            // Modern Python type hints (list[int], not List[int])
                                                    // For tree: "root: TreeNode | None"
                                                    // For linked list: "head: ListNode | None"
                                                    // For string: "s: str"
      "return_type": "int",                         // Return type annotation
      "dummy_return": "0"                           // Default return value
                                                    // For string: "\"\""
                                                    // For bool: "False"
                                                    // For list: "[]"
                                                    // For tree/linked list: "None"
    }
  ],

  // === TEST CONFIGURATION ===
  "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
  "test_class_name": "ContainerWithMostWater",        // PascalCase: TestClassName for pytest class
  "test_helper_methods": [
    {
      "name": "setup_method",
      "parameters": "",
      "body": "self.solution = Solution()"
    }
  ],
  "test_methods": [
    {
      "name": "test_max_area",                      // test_{method_name}
      "parametrize": "height, expected",           // pytest parametrize parameters
      "parametrize_typed": "height: list[int], expected: int", // Method signature with type hints
      "test_cases": "[([1,8,6,2,5,4,8,3,7], 49), ([1,1], 1), ([1,2,1], 2)]", // Test data as string
      "body": "result = self.solution.max_area(height)\nassert result == expected"
    }
  ],

  // === PLAYGROUND NOTEBOOK ===
  // CRITICAL: Use single quotes for Python strings to avoid JSON escaping issues with Jupyter notebooks
  // Double quotes in JSON + cookiecutter + Jupyter notebook = triple escaping issues
  "playground_imports": "from solution import Solution",
  "playground_test_case": "# Example test case\nheight = [1,8,6,2,5,4,8,3,7]\nexpected = 49",
                                                    // For string problems: "s = 'hello'\nexpected = 'olleh'"
                                                    // For tree: "root_list = [3,9,20,None,None,15,7]\nroot = TreeNode.from_list(root_list)"
  "playground_execution": "result = Solution().max_area(height)\nresult",
  "playground_assertion": "assert result == expected"
}
