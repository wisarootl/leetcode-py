{
    // Tree problem example
    question_name: "invert_binary_tree",
    class_name: "InvertBinaryTree",
    method_name: "invert_tree",
    problem_number: "226",
    problem_title: "Invert Binary Tree",
    difficulty: "Easy",
    topics: "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    tags: ["grind-75"],

    problem_description: "Given the root of a binary tree, invert the tree, and return its root.",
    examples: [
        {
            input: "root = [4,2,7,1,3,6,9]",
            output: "[4,7,2,9,6,3,1]",
        },
        {
            input: "root = []",
            output: "[]",
        },
    ],
    constraints: "- The number of nodes in the tree is in the range [0, 100].\n- -100 <= Node.val <= 100",

    // Tree-specific configuration
    parameters: "root: TreeNode | None",
    return_type: "TreeNode | None",
    imports: "from leetcode_py.tree_node import TreeNode", // Use shared TreeNode

    test_cases: [
        {
            args: [[4, 2, 7, 1, 3, 6, 9]], // Tree as list representation
            expected: [4, 7, 2, 9, 6, 3, 1],
        },
        {
            args: [[]], // Empty tree
            expected: [],
        },
    ],

    // Tree-specific test setup
    param_names: "root, expected",
    input_description: "root={root}",
    input_params: "root",
    expected_param: "expected",
    method_args: "root",
    test_input_setup: "root = TreeNode.from_list([4, 2, 7, 1, 3, 6, 9])",
    expected_output_setup: "expected = [4, 7, 2, 9, 6, 3, 1]",
    assertion_code: "assert result == expected",
}
