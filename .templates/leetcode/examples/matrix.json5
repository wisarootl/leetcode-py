{
  // Matrix problem template - for 2D array/matrix problems
  // Example: Spiral Matrix
  // Key differences: 2D array parameters, often have visual examples with images

  // === PROBLEM IDENTIFICATION ===
  "problem_name": "spiral_matrix",                   // snake_case: used for directory/file names
  "solution_class_name": "Solution",                 // Always "Solution" for algorithm problems
  "problem_number": "54",                            // LeetCode problem number as string
  "problem_title": "Spiral Matrix",                 // Exact title from LeetCode
  "difficulty": "Medium",                            // Easy, Medium, Hard
  "topics": "Array, Matrix, Simulation",            // Matrix-related topics
  "tags": ["grind-75"],                             // Optional: common problem set tags

  // === README CONTENT ===
  // IMPORTANT: Preserve rich HTML content from LeetCode including:
  // - Code snippets with backticks: `code`
  // - Bold text: **bold** or <strong>bold</strong>
  // - Italic text: *italic* or <em>italic</em>
  // - Images: <img> tags with proper src and styling
  // - HTML formatting: <p>, <br>, <ul>, <li>, etc.
  // - Mathematical expressions and special characters
  "readme_description": "Given an `m x n` matrix, return all elements of the matrix in spiral order.",

  "readme_examples": [
    {
      // IMPORTANT: Matrix problems often have visual diagrams - include images
      "content": "<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\\n\\n```\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,3,6,9,8,7,4,5]\\n```"
    },
    {
      "content": "<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\\n\\n```\\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n```"
    }
  ],

  "readme_constraints": "- m == matrix.length\\n- n == matrix[i].length\\n- 1 <= m, n <= 10\\n- -100 <= matrix[i][j] <= 100",
  "readme_additional": "",

  // === SOLUTION TEMPLATE ===
  "solution_imports": "",                            // Usually empty for matrix problems
  "solution_methods": [
    {
      "name": "spiral_order",                        // snake_case method name
      "parameters": "matrix: list[list[int]]",       // 2D array type annotation
      "return_type": "list[int]",                    // Usually returns flattened result
      "dummy_return": "[]"                           // Empty list for array returns
    }
  ],

  // === TEST CONFIGURATION ===
  "test_imports": "import pytest\\nfrom leetcode_py.test_utils import logged_test\\nfrom .solution import Solution",
  "test_helper_methods": [
    {
      "name": "setup_method",
      "parameters": "",
      "body": "self.solution = Solution()"
    }
  ],
  "test_methods": [
    {
      "name": "test_spiral_order",
      "parametrize": "matrix, expected",             // Simple matrix, expected pattern
      "parametrize_typed": "matrix: list[list[int]], expected: list[int]",
      "test_cases": "[([[1,2,3],[4,5,6],[7,8,9]], [1,2,3,6,9,8,7,4,5]), ([[1,2,3,4],[5,6,7,8],[9,10,11,12]], [1,2,3,4,8,12,11,10,9,5,6,7])]",
      "body": "result = self.solution.spiral_order(matrix)\\nassert result == expected"
    }
  ],

  // === PLAYGROUND NOTEBOOK ===
  "playground_imports": "from solution import Solution",
  "playground_test_case": "# Example test case\\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\\nexpected = [1,2,3,6,9,8,7,4,5]",
  "playground_execution": "result = Solution().spiral_order(matrix)\\nresult",
  "playground_assertion": "assert result == expected"
}
