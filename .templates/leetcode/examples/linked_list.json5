{
  // Linked List problem template for ListNode problems
  // Use this for problems involving singly linked lists

  // REQUIRED: Core identifiers
  "question_name": "reverse_linked_list_ii",   // Snake case from problem title
  "class_name": "ReverseLinkedListII",         // PascalCase version
  "method_name": "reverse_between",            // Method name from problem (often different from title)

  // REQUIRED: Problem metadata
  "problem_number": "92",                      // String number from LeetCode URL
  "problem_title": "Reverse Linked List II",  // Exact title from LeetCode
  "difficulty": "Medium",                      // Easy|Medium|Hard
  "topics": "Linked List",                     // From LeetCode tags

  // OPTIONAL: Problem categorization
  "tags": [],                                  // Add if part of popular lists

  // REQUIRED: Problem description
  "problem_description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",

  // REQUIRED: Examples (linked list problems show array representation)
  "examples": [
    { "input": "head = [1,2,3,4,5], left = 2, right = 4", "output": "[1,4,3,2,5]" },
    { "input": "head = [5], left = 1, right = 1", "output": "[5]" }
  ],

  // REQUIRED: Constraints
  "constraints": "- The number of nodes in the list is n.\n- 1 <= n <= 500\n- -500 <= Node.val <= 500\n- 1 <= left <= right <= n",

  // REQUIRED: Method signature (ListNode | None for nullable, multiple parameters common)
  "parameters": "head: ListNode | None, left: int, right: int",
  "return_type": "ListNode | None",
  "dummy_return": "None",

  // REQUIRED: ListNode import for linked list problems
  "imports": "from leetcode_py.list_node import ListNode",

  // REQUIRED: Test cases (use array representation, multiple args common)
  "test_cases": [
    { "args": [[1, 2, 3, 4, 5], 2, 4], "expected": [1, 4, 3, 2, 5] },
    { "args": [[5], 1, 1], "expected": [5] },
    { "args": [[1, 2, 3], 1, 3], "expected": [3, 2, 1] }
  ],

  // REQUIRED: Test parameters (use expected_list for linked list problems)
  "param_names": "head_list, left, right, expected_list",
  "param_names_with_types": "head_list: list[int], left: int, right: int, expected_list: list[int]",

  // REQUIRED: Test configuration for linked list problems
  "input_description": "head_list={head_list}, left={left}, right={right}",
  "input_params": "head, left, right",      // Actual parameters passed to method
  "expected_param": "expected",             // ListNode object for assertion
  "method_args": "head, left, right",

  // REQUIRED: Linked list specific test setup (converts arrays to ListNode objects)
  "test_setup": "head = ListNode.from_list(head_list)\nexpected = ListNode.from_list(expected_list)",
  "test_logging": "logger.success(f\"Got result: {result.to_list() if result else []}\")",
  "assertion_code": "assert result == expected",

  // REQUIRED: Notebook setup for linked list problems
  "test_input_setup": "# Example test case\nhead = ListNode.from_list([1, 2, 3, 4, 5])\nleft = 2\nright = 4",
  "expected_output_setup": "expected = ListNode.from_list([1, 4, 3, 2, 5])"
}
