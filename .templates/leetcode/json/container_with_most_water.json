{
    "problem_name": "container_with_most_water",
    "solution_class_name": "Solution",
    "problem_number": "11",
    "problem_title": "Container With Most Water",
    "difficulty": "Medium",
    "topics": "Array, Two Pointers, Greedy",
    "tags": ["grind-75"],
    "readme_description": "You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `i`th line are `(i, 0)` and `(i, height[i])`.\n\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\n\nReturn the maximum amount of water a container can store.\n\nNotice that you may not slant the container.",
    "readme_examples": [
        {
            "content": "<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n\n```\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n```"
        },
        { "content": "```\nInput: height = [1,1]\nOutput: 1\n```" }
    ],
    "readme_constraints": "- n == height.length\n- 2 <= n <= 10^5\n- 0 <= height[i] <= 10^4",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "max_area",
            "parameters": "height: list[int]",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_max_area",
            "parametrize": "height, expected",
            "parametrize_typed": "height: list[int], expected: int",
            "test_cases": "[([1,8,6,2,5,4,8,3,7], 49), ([1,1], 1), ([1,2,1], 2)]",
            "body": "result = self.solution.max_area(height)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nheight = [1,8,6,2,5,4,8,3,7]\nexpected = 49",
    "playground_execution": "result = Solution().max_area(height)\nresult",
    "playground_assertion": "assert result == expected"
}
