{
    "problem_name": "valid_parentheses",
    "solution_class_name": "Solution",
    "problem_number": "20",
    "problem_title": "Valid Parentheses",
    "difficulty": "Easy",
    "topics": "String, Stack",
    "tags": ["grind-75"],
    "readme_description": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "readme_examples": [
        { "content": "```\nInput: s = \"()\"\nOutput: true\n```" },
        { "content": "```\nInput: s = \"()[]{}\"\nOutput: true\n```" },
        { "content": "```\nInput: s = \"(]\"\nOutput: false\n```" },
        { "content": "```\nInput: s = \"([])\"\nOutput: true\n```" },
        { "content": "```\nInput: s = \"([)]\"\nOutput: false\n```" }
    ],
    "readme_constraints": "- `1 <= s.length <= 10^4`\n- `s` consists of parentheses only `'()[]{}'`.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        { "name": "is_valid", "parameters": "s: str", "return_type": "bool", "dummy_return": "False" }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "ValidParentheses",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_is_valid",
            "parametrize": "s, expected",
            "parametrize_typed": "s: str, expected: bool",
            "test_cases": "[('()', True), ('()[]{}', True), ('(]', False), ('([])', True), ('([)]', False), ('', True), ('(', False), (')', False), ('{[()]}', True), ('{[(])}', False)]",
            "body": "result = self.solution.is_valid(s)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\ns = '()'\nexpected = True",
    "playground_execution": "result = Solution().is_valid(s)\nresult",
    "playground_assertion": "assert result == expected"
}
