{
    "problem_name": "trapping_rain_water",
    "solution_class_name": "Solution",
    "problem_number": "42",
    "problem_title": "Trapping Rain Water",
    "difficulty": "Hard",
    "topics": "Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack",
    "tags": ["grind-75"],
    "readme_description": "Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png)\n\n```\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\n```\n**Explanation:** The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."
        },
        { "content": "```\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n```" }
    ],
    "readme_constraints": "- `n == height.length`\n- `1 <= n <= 2 * 10^4`\n- `0 <= height[i] <= 10^5`",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        { "name": "trap", "parameters": "height: list[int]", "return_type": "int", "dummy_return": "0" }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "TrappingRainWater",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_trap",
            "parametrize": "height, expected",
            "parametrize_typed": "height: list[int], expected: int",
            "test_cases": "[([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], 6), ([4, 2, 0, 3, 2, 5], 9), ([3, 0, 2, 0, 4], 7), ([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], 6)]",
            "body": "result = self.solution.trap(height)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nheight = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]\nexpected = 6",
    "playground_execution": "result = Solution().trap(height)\nresult",
    "playground_assertion": "assert result == expected"
}
