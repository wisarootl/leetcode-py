{
    "problem_name": "first_bad_version",
    "solution_class_name": "Solution",
    "problem_number": "278",
    "problem_title": "First Bad Version",
    "difficulty": "Easy",
    "topics": "Binary Search, Interactive",
    "tags": ["grind-75"],
    "readme_description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",
    "readme_examples": [
        {
            "content": "```\nInput: n = 5, bad = 4\nOutput: 4\n```\n**Explanation:**\n```\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\n```\nThen 4 is the first bad version."
        },
        { "content": "```\nInput: n = 1, bad = 1\nOutput: 1\n```" }
    ],
    "readme_constraints": "- 1 <= bad <= n <= 2^31 - 1",
    "readme_additional": "**Note:** The `isBadVersion` API is already defined for you.",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "is_bad_version",
            "parameters": "version: int",
            "return_type": "bool",
            "dummy_return": "False"
        },
        {
            "name": "first_bad_version",
            "parameters": "n: int",
            "return_type": "int",
            "dummy_return": "1"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "FirstBadVersion",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" },
        {
            "name": "is_bad_version",
            "parameters": "version: int, bad: int",
            "body": "return version >= bad"
        }
    ],
    "test_methods": [
        {
            "name": "test_first_bad_version",
            "parametrize": "n, bad, expected",
            "parametrize_typed": "n: int, bad: int, expected: int",
            "test_cases": "[(5, 4, 4), (1, 1, 1), (3, 1, 1), (10, 7, 7), (5, -1, 1)]",
            "body": "solution = Solution()\n# Mock is_bad_version for this test\nsolution.is_bad_version = lambda version: self.is_bad_version(version, bad)\nresult = solution.first_bad_version(n)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nn = 5\nbad = 4\nexpected = 4",
    "playground_execution": "solution = Solution()\nsolution.is_bad_version = lambda version: version >= bad\nresult = solution.first_bad_version(n)\nresult",
    "playground_assertion": "assert result == expected"
}
