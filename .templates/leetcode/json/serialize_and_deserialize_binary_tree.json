{
    "problem_name": "serialize_and_deserialize_binary_tree",
    "solution_class_name": "Codec",
    "problem_number": "297",
    "problem_title": "Serialize and Deserialize Binary Tree",
    "difficulty": "Hard",
    "topics": "String, Tree, Depth-First Search, Breadth-First Search, Design, Binary Tree",
    "tags": ["grind-75"],
    "readme_description": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\n\n**Clarification:** The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg)\n\n```\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\n```"
        },
        { "content": "```\nInput: root = []\nOutput: []\n```" }
    ],
    "readme_constraints": "- The number of nodes in the tree is in the range [0, 10^4].\n- -1000 <= Node.val <= 1000",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_methods": [
        { "name": "__init__", "parameters": "", "return_type": "", "dummy_return": "" },
        {
            "name": "serialize",
            "parameters": "root: TreeNode | None",
            "return_type": "str",
            "dummy_return": "''"
        },
        {
            "name": "deserialize",
            "parameters": "data: str",
            "return_type": "TreeNode | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import TreeNode\nfrom .solution import Codec",
    "test_class_name": "SerializeAndDeserializeBinaryTree",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.codec = Codec()" }
    ],
    "test_methods": [
        {
            "name": "test_serialize_deserialize",
            "parametrize": "root_list",
            "parametrize_typed": "root_list: list[int | None]",
            "test_cases": "[([1, 2, 3, None, None, 4, 5]), ([]), ([1]), ([1, 2]), ([1, None, 2]), ([1, 2, 3, 4, 5, 6, 7]), ([5, 2, 3, None, None, 2, 4, 3, 1])]",
            "body": "root = TreeNode.from_list(root_list) if root_list else None\nserialized = self.codec.serialize(root)\ndeserialized = self.codec.deserialize(serialized)\nif root is None:\n    assert deserialized is None\nelse:\n    assert deserialized is not None\n    assert deserialized.to_list() == root.to_list()"
        }
    ],
    "playground_imports": "from solution import Codec\nfrom leetcode_py import TreeNode",
    "playground_test_case": "# Example test case\nroot_list = [1, 2, 3, None, None, 4, 5]\nroot = TreeNode.from_list(root_list) if root_list else None",
    "playground_execution": "codec = Codec()\nserialized = codec.serialize(root)\ndeserialized = codec.deserialize(serialized)\nprint(f'Original: {root.to_list() if root else None}')\nprint(f'Serialized: {serialized}')\nprint(f'Deserialized: {deserialized.to_list() if deserialized else None}')\ndeserialized",
    "playground_assertion": "if root is None:\n    assert deserialized is None\nelse:\n    assert deserialized is not None\n    assert deserialized.to_list() == root.to_list()"
}
