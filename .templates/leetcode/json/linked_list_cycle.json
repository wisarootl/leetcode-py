{
    "problem_name": "linked_list_cycle",
    "solution_class_name": "Solution",
    "problem_number": "141",
    "problem_title": "Linked List Cycle",
    "difficulty": "Easy",
    "topics": "Hash Table, Linked List, Two Pointers",
    "tags": [],
    "readme_description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.\n\nReturn `true` *if there is a cycle in the linked list*. Otherwise, return `false`.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n```\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\n```\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n```\nInput: head = [1,2], pos = 0\nOutput: true\n```\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node."
        },
        {
            "content": "![Example 3](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n```\nInput: head = [1], pos = -1\nOutput: false\n```\n**Explanation:** There is no cycle in the linked list."
        }
    ],
    "readme_constraints": "- The number of the nodes in the list is in the range `[0, 10^4]`.\n- `-10^5 <= Node.val <= 10^5`\n- `pos` is `-1` or a **valid index** in the linked-list.",
    "readme_additional": "**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "has_cycle",
            "parameters": "head: ListNode[int] | None",
            "return_type": "bool",
            "dummy_return": "False"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py import ListNode\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "LinkedListCycle",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" },
        {
            "name": "_create_cycle_list",
            "parameters": "values: list[int], pos: int",
            "body": "if not values:\n    return None\n\nhead = ListNode.from_list(values)\nif pos == -1:\n    return head\n\n# Find the node at position pos\ncurrent = head\nfor _ in range(pos):\n    current = current.next\ncycle_node = current\n\n# Find the tail\ntail = head\nwhile tail.next:\n    tail = tail.next\n\n# Create cycle\ntail.next = cycle_node\nreturn head"
        }
    ],
    "test_methods": [
        {
            "name": "test_has_cycle",
            "parametrize": "values, pos, expected",
            "parametrize_typed": "values: list[int], pos: int, expected: bool",
            "test_cases": "[([3, 2, 0, -4], 1, True), ([1, 2], 0, True), ([1], -1, False), ([], -1, False), ([1, 2, 3, 4, 5], 2, True), ([1, 2, 3], -1, False)]",
            "body": "head = self._create_cycle_list(values, pos)\nresult = self.solution.has_cycle(head)\nassert result == expected"
        }
    ],
    "playground_imports": "from leetcode_py import ListNode\nfrom solution import Solution",
    "playground_test_case": "# Example test case\nvalues = [3, 2, 0, -4]\npos = 1\nexpected = True",
    "playground_execution": "head = create_cycle_list(values, pos)\nresult = Solution().has_cycle(head)\nresult",
    "playground_assertion": "assert result == expected"
}
