{
    "problem_name": "largest_rectangle_in_histogram",
    "solution_class_name": "Solution",
    "problem_number": "84",
    "problem_title": "Largest Rectangle in Histogram",
    "difficulty": "Hard",
    "topics": "Array, Stack, Monotonic Stack",
    "tags": ["grind-75"],
    "readme_description": "Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg)\n\n```\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\n```\n**Explanation:** The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units."
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg)\n\n```\nInput: heights = [2,4]\nOutput: 4\n```"
        }
    ],
    "readme_constraints": "- `1 <= heights.length <= 10^5`\n- `0 <= heights[i] <= 10^4`",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "largest_rectangle_area",
            "parameters": "heights: list[int]",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "LargestRectangleInHistogram",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_largest_rectangle_area",
            "parametrize": "heights, expected",
            "parametrize_typed": "heights: list[int], expected: int",
            "test_cases": "[([2, 1, 5, 6, 2, 3], 10), ([2, 4], 4), ([1], 1), ([0], 0), ([1, 1], 2), ([0, 0, 0], 0), ([1, 2, 3, 4, 5], 9), ([5, 4, 3, 2, 1], 9), ([3, 3, 3, 3], 12), ([2, 1, 2], 3), ([1, 3, 1], 3), ([6, 7, 5, 2, 4, 5, 9, 3], 16), ([4, 2, 0, 3, 2, 5], 6), ([1, 2, 2, 1], 4), ([0, 9], 9), ([9, 0], 9), ([2, 1, 5, 6, 2, 3, 1, 5, 6, 2], 10), ([1, 8, 6, 2, 5, 4, 8, 3, 7], 16)]",
            "body": "result = self.solution.largest_rectangle_area(heights)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nheights = [2, 1, 5, 6, 2, 3]\nexpected = 10",
    "playground_execution": "result = Solution().largest_rectangle_area(heights)\nresult",
    "playground_assertion": "assert result == expected"
}
