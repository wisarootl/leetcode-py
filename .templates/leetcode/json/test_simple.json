{
    "problem_name": "test_simple",
    "solution_class_name": "Solution",
    "problem_number": "217",
    "problem_title": "Contains Duplicate",
    "difficulty": "Easy",
    "topics": "Array, Hash Table, Sorting",
    "tags": ["grind-75"],
    "readme_description": "Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.",
    "readme_examples": [
        {
            "content": "```\nInput: nums = [1,2,3,1]\nOutput: true\n```\n**Explanation:** The element 1 occurs at the indices 0 and 3."
        },
        {
            "content": "```\nInput: nums = [1,2,3,4]\nOutput: false\n```\n**Explanation:** All elements are distinct."
        },
        { "content": "```\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n```" }
    ],
    "readme_constraints": "- 1 <= nums.length <= 10^5\n- -10^9 <= nums[i] <= 10^9",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "contains_duplicate",
            "parameters": "nums: list[int]",
            "return_type": "bool",
            "dummy_return": "False"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "ContainsDuplicate",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_contains_duplicate",
            "parametrize": "nums, expected",
            "parametrize_typed": "nums: list[int], expected: bool",
            "test_cases": "[([1, 2, 3, 1], True), ([1, 2, 3, 4], False), ([1, 1, 1, 3, 3, 4, 3, 2, 4, 2], True)]",
            "body": "result = self.solution.contains_duplicate(nums)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [1, 2, 3, 1]\nexpected = True",
    "playground_execution": "result = Solution().contains_duplicate(nums)\nresult",
    "playground_assertion": "assert result == expected"
}
