{
    "problem_name": "reverse_linked_list_ii",
    "solution_class_name": "Solution",
    "problem_number": "92",
    "problem_title": "Reverse Linked List II",
    "difficulty": "Medium",
    "topics": "Linked List",
    "tags": ["grind-75"],
    "readme_description": "Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.",
    "readme_examples": [
        { "content": "```\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n```" },
        { "content": "```\nInput: head = [5], left = 1, right = 1\nOutput: [5]\n```" }
    ],
    "readme_constraints": "- The number of nodes in the list is n\n- 1 <= n <= 500\n- -500 <= Node.val <= 500\n- 1 <= left <= right <= n",
    "readme_additional": "**Follow up:** Could you do it in one pass?",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "reverse_between",
            "parameters": "head: ListNode | None, left: int, right: int",
            "return_type": "ListNode | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\n\nfrom leetcode_py import ListNode\nfrom leetcode_py.test_utils import logged_test\n\nfrom .solution import Solution",
    "test_class_name": "ReverseLinkedListII",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_reverse_between",
            "parametrize": "head_list, left, right, expected_list",
            "parametrize_typed": "head_list: list[int], left: int, right: int, expected_list: list[int]",
            "test_cases": "[([1, 2, 3, 4, 5], 2, 4, [1, 4, 3, 2, 5]), ([5], 1, 1, [5])]",
            "body": "head = ListNode.from_list(head_list)\nexpected = ListNode.from_list(expected_list)\nresult = self.solution.reverse_between(head, left, right)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\n\nfrom leetcode_py import ListNode",
    "playground_test_case": "# Example test case\nhead_list = [1, 2, 3, 4, 5]\nhead = ListNode.from_list(head_list)\nleft, right = 2, 4\nexpected = ListNode.from_list([1, 4, 3, 2, 5])",
    "playground_execution": "result = Solution().reverse_between(head, left, right)\nresult",
    "playground_assertion": "assert result == expected"
}
