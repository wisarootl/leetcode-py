{
    "problem_name": "merge_intervals",
    "solution_class_name": "Solution",
    "problem_number": "56",
    "problem_title": "Merge Intervals",
    "difficulty": "Medium",
    "topics": "Array, Sorting",
    "tags": ["grind-75"],
    "readme_description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "readme_examples": [
        {
            "content": "```\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\n```\n**Explanation:** Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
        },
        {
            "content": "```\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\n```\n**Explanation:** Intervals [1,4] and [4,5] are considered overlapping."
        },
        {
            "content": "```\nInput: intervals = [[4,7],[1,4]]\nOutput: [[1,7]]\n```\n**Explanation:** Intervals [1,4] and [4,7] are considered overlapping."
        }
    ],
    "readme_constraints": "- `1 <= intervals.length <= 10^4`\n- `intervals[i].length == 2`\n- `0 <= starti <= endi <= 10^4`",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "merge",
            "parameters": "intervals: list[list[int]]",
            "return_type": "list[list[int]]",
            "dummy_return": "[]"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "MergeIntervals",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_merge",
            "parametrize": "intervals, expected",
            "parametrize_typed": "intervals: list[list[int]], expected: list[list[int]]",
            "test_cases": "[([[1,3],[2,6],[8,10],[15,18]], [[1,6],[8,10],[15,18]]), ([[1,4],[4,5]], [[1,5]]), ([[4,7],[1,4]], [[1,7]])]",
            "body": "result = self.solution.merge(intervals)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nintervals = [[1,3],[2,6],[8,10],[15,18]]\nexpected = [[1,6],[8,10],[15,18]]",
    "playground_execution": "result = Solution().merge(intervals)\nresult",
    "playground_assertion": "assert result == expected"
}
