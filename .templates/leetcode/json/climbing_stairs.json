{
    "problem_name": "climbing_stairs",
    "solution_class_name": "Solution",
    "problem_number": "70",
    "problem_title": "Climbing Stairs",
    "difficulty": "Easy",
    "topics": "Math, Dynamic Programming, Memoization",
    "tags": ["grind-75"],
    "readme_description": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?",
    "readme_examples": [
        {
            "content": "```\nInput: n = 2\nOutput: 2\n```\n**Explanation:** There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"
        },
        {
            "content": "```\nInput: n = 3\nOutput: 3\n```\n**Explanation:** There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        }
    ],
    "readme_constraints": "- 1 <= n <= 45",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        { "name": "climb_stairs", "parameters": "n: int", "return_type": "int", "dummy_return": "1" }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "ClimbingStairs",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_climb_stairs",
            "parametrize": "n, expected",
            "parametrize_typed": "n: int, expected: int",
            "test_cases": "[(1, 1), (2, 2), (3, 3), (4, 5), (5, 8), (6, 13), (10, 89), (20, 10946), (45, 1836311903)]",
            "body": "result = self.solution.climb_stairs(n)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nn = 3\nexpected = 3",
    "playground_execution": "result = Solution().climb_stairs(n)\nresult",
    "playground_assertion": "assert result == expected"
}
