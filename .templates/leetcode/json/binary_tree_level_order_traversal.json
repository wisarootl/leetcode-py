{
    "problem_name": "binary_tree_level_order_traversal",
    "solution_class_name": "Solution",
    "problem_number": "102",
    "problem_title": "Binary Tree Level Order Traversal",
    "difficulty": "Medium",
    "topics": "Tree, Breadth-First Search, Binary Tree",
    "tags": ["grind-75"],
    "readme_description": "Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n```\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n```"
        },
        { "content": "```\nInput: root = [1]\nOutput: [[1]]\n```" },
        { "content": "```\nInput: root = []\nOutput: []\n```" }
    ],
    "readme_constraints": "- The number of nodes in the tree is in the range [0, 2000]\n- -1000 <= Node.val <= 1000",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_methods": [
        {
            "name": "level_order",
            "parameters": "root: TreeNode | None",
            "return_type": "list[list[int]]",
            "dummy_return": "[]"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import TreeNode\nfrom .solution import Solution",
    "test_class_name": "BinaryTreeLevelOrderTraversal",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_level_order",
            "parametrize": "root_list, expected",
            "parametrize_typed": "root_list: list[int | None], expected: list[list[int]]",
            "test_cases": "[([3, 9, 20, None, None, 15, 7], [[3], [9, 20], [15, 7]]), ([1], [[1]]), ([], []), ([1, 2, 3, 4, 5, 6, 7], [[1], [2, 3], [4, 5, 6, 7]]), ([1, 2, None, 3, None, 4, None, 5], [[1], [2], [3], [4], [5]])]",
            "body": "root = TreeNode.from_list(root_list) if root_list else None\nresult = self.solution.level_order(root)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_test_case": "# Example test case\nroot_list = [3, 9, 20, None, None, 15, 7]\nroot = TreeNode.from_list(root_list)\nexpected = [[3], [9, 20], [15, 7]]",
    "playground_execution": "result = Solution().level_order(root)\nresult",
    "playground_assertion": "assert result == expected"
}
