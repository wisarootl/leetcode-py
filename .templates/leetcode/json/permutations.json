{
    "problem_name": "permutations",
    "solution_class_name": "Solution",
    "problem_number": "46",
    "problem_title": "Permutations",
    "difficulty": "Medium",
    "topics": "Array, Backtracking",
    "tags": ["grind-75"],
    "readme_description": "Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "readme_examples": [
        {
            "content": "```\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n```"
        },
        { "content": "```\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\n```" },
        { "content": "```\nInput: nums = [1]\nOutput: [[1]]\n```" }
    ],
    "readme_constraints": "- 1 <= nums.length <= 6\n- -10 <= nums[i] <= 10\n- All the integers of nums are unique.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "permute",
            "parameters": "nums: list[int]",
            "return_type": "list[list[int]]",
            "dummy_return": "[]"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "TestPermutations",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_permute",
            "parametrize": "nums, expected",
            "parametrize_typed": "nums: list[int], expected: list[list[int]]",
            "test_cases": "[([1, 2, 3], [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]), ([0, 1], [[0, 1], [1, 0]]), ([1], [[1]])]",
            "body": "result = self.solution.permute(nums)\n        # Sort both result and expected for comparison since order doesn't matter\n        result_sorted = [sorted(perm) for perm in result]\n        expected_sorted = [sorted(perm) for perm in expected]\n        result_sorted.sort()\n        expected_sorted.sort()\n        assert len(result) == len(expected)\n        assert result_sorted == expected_sorted"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\nnums = [1, 2, 3]\nexpected = [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
    "playground_execution": "result = Solution().permute(nums)\nresult",
    "playground_assertion": "# Check that we have the right number of permutations\nassert len(result) == len(expected)\n# Sort for comparison since order doesn't matter\nresult_sorted = [sorted(perm) for perm in result]\nexpected_sorted = [sorted(perm) for perm in expected]\nresult_sorted.sort()\nexpected_sorted.sort()\nassert result_sorted == expected_sorted"
}
