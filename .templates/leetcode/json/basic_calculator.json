{
    "problem_name": "basic_calculator",
    "solution_class_name": "Solution",
    "problem_number": "224",
    "problem_title": "Basic Calculator",
    "difficulty": "Hard",
    "topics": "Math, String, Stack, Recursion",
    "tags": ["grind-75"],
    "readme_description": "Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\n\n**Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`.",
    "readme_examples": [
        { "content": "```\nInput: s = \"1 + 1\"\nOutput: 2\n```" },
        { "content": "```\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n```" },
        { "content": "```\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n```" }
    ],
    "readme_constraints": "- `1 <= s.length <= 3 * 10^5`\n- `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.\n- `s` represents a valid expression.\n- `'+'` is **not** used as a unary operation (i.e., `\"+1\"` and `\"+(2 + 3)\"` is invalid).\n- `'-'` could be used as a unary operation (i.e., `\"-1\"` and `\"-(2 + 3)\"` is valid).\n- There will be no two consecutive operators in the input.\n- Every number and running calculation will fit in a signed 32-bit integer.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        { "name": "calculate", "parameters": "s: str", "return_type": "int", "dummy_return": "0" }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "BasicCalculator",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_calculate",
            "parametrize": "s, expected",
            "parametrize_typed": "s: str, expected: int",
            "test_cases": "[(\"1 + 1\", 2), (\" 2-1 + 2 \", 3), (\"(1+(4+5+2)-3)+(6+8)\", 23), (\"1\", 1), (\"-1\", -1), (\"-(1+2)\", -3), (\"2147483647\", 2147483647), (\"1-1+1\", 1)]",
            "body": "result = self.solution.calculate(s)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\ns = '(1+(4+5+2)-3)+(6+8)'\nexpected = 23",
    "playground_execution": "result = Solution().calculate(s)\nresult",
    "playground_assertion": "assert result == expected"
}
