{
    "problem_name": "number_of_islands",
    "solution_class_name": "Solution",
    "problem_number": "200",
    "problem_title": "Number of Islands",
    "difficulty": "Medium",
    "topics": "Array, Depth-First Search, Breadth-First Search, Union Find, Matrix",
    "tags": ["grind-75"],
    "readme_description": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return *the number of islands*.\n\nAn **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "readme_examples": [
        {
            "content": "```\nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n```"
        },
        {
            "content": "```\nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n```"
        }
    ],
    "readme_constraints": "- `m == grid.length`\n- `n == grid[i].length`\n- `1 <= m, n <= 300`\n- `grid[i][j]` is `'0'` or `'1'`.",
    "readme_additional": "",
    "solution_imports": "",
    "solution_methods": [
        {
            "name": "num_islands",
            "parameters": "grid: list[list[str]]",
            "return_type": "int",
            "dummy_return": "0"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom .solution import Solution",
    "test_class_name": "NumberOfIslands",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_num_islands",
            "parametrize": "grid, expected",
            "parametrize_typed": "grid: list[list[str]], expected: int",
            "test_cases": "[([['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']], 1), ([['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']], 3), ([['1']], 1), ([['0']], 0), ([['1','0','1'],['0','1','0'],['1','0','1']], 5)]",
            "body": "result = self.solution.num_islands(grid)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution",
    "playground_test_case": "# Example test case\ngrid = [\n    ['1','1','1','1','0'],\n    ['1','1','0','1','0'],\n    ['1','1','0','0','0'],\n    ['0','0','0','0','0']\n]\nexpected = 1",
    "playground_execution": "result = Solution().num_islands(grid)\nresult",
    "playground_assertion": "assert result == expected"
}
