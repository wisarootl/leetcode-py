{
    "problem_name": "binary_tree_right_side_view",
    "solution_class_name": "Solution",
    "problem_number": "199",
    "problem_title": "Binary Tree Right Side View",
    "difficulty": "Medium",
    "topics": "Tree, Depth-First Search, Breadth-First Search, Binary Tree",
    "tags": ["grind-75"],
    "readme_description": "Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return *the values of the nodes you can see ordered from top to bottom*.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2024/11/24/tmpd5jn43fs-1.png)\n\n```\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n```"
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2024/11/24/tmpkpe40xeh-1.png)\n\n```\nInput: root = [1,2,3,4,null,null,null,5]\nOutput: [1,3,4,5]\n```"
        },
        { "content": "```\nInput: root = [1,null,3]\nOutput: [1,3]\n```" },
        { "content": "```\nInput: root = []\nOutput: []\n```" }
    ],
    "readme_constraints": "- The number of nodes in the tree is in the range `[0, 100]`.\n- `-100 <= Node.val <= 100`",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import TreeNode",
    "solution_methods": [
        {
            "name": "right_side_view",
            "parameters": "root: TreeNode[int] | None",
            "return_type": "list[int]",
            "dummy_return": "[]"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import TreeNode\nfrom .solution import Solution",
    "test_class_name": "BinaryTreeRightSideView",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_right_side_view",
            "parametrize": "root_list, expected",
            "parametrize_typed": "root_list: list[int | None], expected: list[int]",
            "test_cases": "[([1, 2, 3, None, 5, None, 4], [1, 3, 4]), ([1, 2, 3, 4, None, None, None, 5], [1, 3, 4, 5]), ([1, None, 3], [1, 3]), ([], [])]",
            "body": "root = TreeNode.from_list(root_list)\nresult = self.solution.right_side_view(root)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import TreeNode",
    "playground_test_case": "# Example test case\nroot_list: list[int | None] = [1, 2, 3, None, 5, None, 4]\nexpected = [1, 3, 4]",
    "playground_execution": "root = TreeNode.from_list(root_list)\nresult = Solution().right_side_view(root)\nresult",
    "playground_assertion": "assert result == expected"
}
