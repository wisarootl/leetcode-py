{
    "problem_name": "middle_of_the_linked_list",
    "solution_class_name": "Solution",
    "problem_number": "876",
    "problem_title": "Middle of the Linked List",
    "difficulty": "Easy",
    "topics": "Linked List, Two Pointers",
    "tags": ["grind-75"],
    "readme_description": "Given the `head` of a singly linked list, return *the middle node of the linked list*.\n\nIf there are two middle nodes, return **the second middle** node.",
    "readme_examples": [
        {
            "content": "![Example 1](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg)\n\n```\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\n```\n**Explanation:** The middle node of the list is node 3."
        },
        {
            "content": "![Example 2](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg)\n\n```\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\n```\n**Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one."
        }
    ],
    "readme_constraints": "- The number of nodes in the list is in the range `[1, 100]`.\n- `1 <= Node.val <= 100`",
    "readme_additional": "",
    "solution_imports": "from leetcode_py import ListNode",
    "solution_methods": [
        {
            "name": "middle_node",
            "parameters": "head: ListNode | None",
            "return_type": "ListNode | None",
            "dummy_return": "None"
        }
    ],
    "test_imports": "import pytest\nfrom leetcode_py.test_utils import logged_test\nfrom leetcode_py import ListNode\nfrom .solution import Solution",
    "test_class_name": "MiddleOfTheLinkedList",
    "test_helper_methods": [
        { "name": "setup_method", "parameters": "", "body": "self.solution = Solution()" }
    ],
    "test_methods": [
        {
            "name": "test_middle_node",
            "parametrize": "head_list, expected_list",
            "parametrize_typed": "head_list: list[int], expected_list: list[int]",
            "test_cases": "[([1, 2, 3, 4, 5], [3, 4, 5]), ([1, 2, 3, 4, 5, 6], [4, 5, 6]), ([1], [1]), ([1, 2], [2])]",
            "body": "head = ListNode.from_list(head_list)\nexpected = ListNode.from_list(expected_list)\nresult = self.solution.middle_node(head)\nassert result == expected"
        }
    ],
    "playground_imports": "from solution import Solution\nfrom leetcode_py import ListNode",
    "playground_test_case": "# Example test case\nhead_list = [1, 2, 3, 4, 5]\nexpected_list = [3, 4, 5]",
    "playground_execution": "head = ListNode.from_list(head_list)\nresult = Solution().middle_node(head)\nresult",
    "playground_assertion": "expected = ListNode.from_list(expected_list)\nassert result == expected"
}
